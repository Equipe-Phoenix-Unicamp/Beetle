
Beetle C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000624  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000698  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000021b  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012b  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019b  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b4  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000230  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001cc  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	53 c0       	rjmp	.+166    	; 0xc2 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	a8 d0       	rcall	.+336    	; 0x194 <main>
  44:	ed c2       	rjmp	.+1498   	; 0x620 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
volatile uint16_t time_int_0_before = 0;

volatile uint8_t last_pow_dir = 0;
volatile uint8_t last_pow_esq = 0;

ISR(INT0_vect){ //Interrupcao chamada quando pino muda de estado
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	if (PINB & (1 << PINB6)) //Pino foi para alto
  5a:	b6 9b       	sbis	0x16, 6	; 22
  5c:	07 c0       	rjmp	.+14     	; 0x6c <__vector_1+0x24>
	{
		time_int_0_before = TCNT0L; //Salva tempo
  5e:	82 b7       	in	r24, 0x32	; 50
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	90 93 63 00 	sts	0x0063, r25
  66:	80 93 62 00 	sts	0x0062, r24
  6a:	22 c0       	rjmp	.+68     	; 0xb0 <__vector_1+0x68>
	}
	else //Pino foi para baixo
	{
		if ((TCNT0L - time_int_0_before) > 120 && (TCNT0L - time_int_0_before) < 255) 
  6c:	82 b7       	in	r24, 0x32	; 50
  6e:	20 91 62 00 	lds	r18, 0x0062
  72:	30 91 63 00 	lds	r19, 0x0063
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	82 1b       	sub	r24, r18
  7a:	93 0b       	sbc	r25, r19
  7c:	89 37       	cpi	r24, 0x79	; 121
  7e:	91 05       	cpc	r25, r1
  80:	b8 f0       	brcs	.+46     	; 0xb0 <__vector_1+0x68>
  82:	82 b7       	in	r24, 0x32	; 50
  84:	20 91 62 00 	lds	r18, 0x0062
  88:	30 91 63 00 	lds	r19, 0x0063
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	82 1b       	sub	r24, r18
  90:	93 0b       	sbc	r25, r19
  92:	8f 3f       	cpi	r24, 0xFF	; 255
  94:	91 05       	cpc	r25, r1
  96:	60 f4       	brcc	.+24     	; 0xb0 <__vector_1+0x68>
		{
			time_int_0 = TCNT0L - time_int_0_before; //Salva diferenca de tempo para calculo do pwm
  98:	82 b7       	in	r24, 0x32	; 50
  9a:	20 91 62 00 	lds	r18, 0x0062
  9e:	30 91 63 00 	lds	r19, 0x0063
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	82 1b       	sub	r24, r18
  a6:	93 0b       	sbc	r25, r19
  a8:	90 93 65 00 	sts	0x0065, r25
  ac:	80 93 64 00 	sts	0x0064, r24
		}
	}
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	3f 91       	pop	r19
  b6:	2f 91       	pop	r18
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_13>:

ISR(INT1_vect){ //Vide funcao acima
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	if (PINA & (1 << PINA2))	
  d4:	ca 9b       	sbis	0x19, 2	; 25
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <__vector_13+0x24>
	{
		time_int_1_before = TCNT0L;
  d8:	82 b7       	in	r24, 0x32	; 50
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 67 00 	sts	0x0067, r25
  e0:	80 93 66 00 	sts	0x0066, r24
  e4:	22 c0       	rjmp	.+68     	; 0x12a <__vector_13+0x68>
	}
	else
	{
		if ((TCNT0L - time_int_1_before) > 120 && (TCNT0L - time_int_1_before) < 255)
  e6:	82 b7       	in	r24, 0x32	; 50
  e8:	20 91 66 00 	lds	r18, 0x0066
  ec:	30 91 67 00 	lds	r19, 0x0067
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 1b       	sub	r24, r18
  f4:	93 0b       	sbc	r25, r19
  f6:	89 37       	cpi	r24, 0x79	; 121
  f8:	91 05       	cpc	r25, r1
  fa:	b8 f0       	brcs	.+46     	; 0x12a <__vector_13+0x68>
  fc:	82 b7       	in	r24, 0x32	; 50
  fe:	20 91 66 00 	lds	r18, 0x0066
 102:	30 91 67 00 	lds	r19, 0x0067
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	82 1b       	sub	r24, r18
 10a:	93 0b       	sbc	r25, r19
 10c:	8f 3f       	cpi	r24, 0xFF	; 255
 10e:	91 05       	cpc	r25, r1
 110:	60 f4       	brcc	.+24     	; 0x12a <__vector_13+0x68>
		{
			time_int_1 = TCNT0L - time_int_1_before;
 112:	82 b7       	in	r24, 0x32	; 50
 114:	20 91 66 00 	lds	r18, 0x0066
 118:	30 91 67 00 	lds	r19, 0x0067
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	82 1b       	sub	r24, r18
 120:	93 0b       	sbc	r25, r19
 122:	90 93 69 00 	sts	0x0069, r25
 126:	80 93 68 00 	sts	0x0068, r24
		}
	}
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <_Z16configura_portasv>:

//configura os inputs e outputs
void configura_portas (){
	//define as portas como saída
	set_output(DDRB, PB0);
 13c:	b8 9a       	sbi	0x17, 0	; 23
	set_output(DDRB, PB1);
 13e:	b9 9a       	sbi	0x17, 1	; 23
	set_output(DDRB, PB2);
 140:	ba 9a       	sbi	0x17, 2	; 23
	set_output(DDRB, PB3);
 142:	bb 9a       	sbi	0x17, 3	; 23
	//define as portas como entrada
	set_input(DDRB, PB4);
 144:	bc 98       	cbi	0x17, 4	; 23
	set_input(DDRB, PB5);
 146:	bd 98       	cbi	0x17, 5	; 23
	set_input(DDRB, PB6);
 148:	be 98       	cbi	0x17, 6	; 23
	set_input(DDRB, PB7);
 14a:	bf 98       	cbi	0x17, 7	; 23
	set_input(DDRA, PA0);
 14c:	d0 98       	cbi	0x1a, 0	; 26
	set_input(DDRA, PA1);
 14e:	d1 98       	cbi	0x1a, 1	; 26
	set_input(DDRA, PA2);
 150:	d2 98       	cbi	0x1a, 2	; 26
 152:	08 95       	ret

00000154 <_Z8delay_msh>:
}

// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	00 d0       	rcall	.+0      	; 0x15a <_Z8delay_msh+0x6>
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
 15e:	88 23       	and	r24, r24
 160:	a1 f0       	breq	.+40     	; 0x18a <_Z8delay_msh+0x36>
		for (i=0; i != delay_count; i++);
 162:	1a 82       	std	Y+2, r1	; 0x02
 164:	19 82       	std	Y+1, r1	; 0x01
 166:	29 81       	ldd	r18, Y+1	; 0x01
 168:	3a 81       	ldd	r19, Y+2	; 0x02
 16a:	28 3e       	cpi	r18, 0xE8	; 232
 16c:	33 40       	sbci	r19, 0x03	; 3
 16e:	59 f0       	breq	.+22     	; 0x186 <_Z8delay_msh+0x32>
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	3a 83       	std	Y+2, r19	; 0x02
 17a:	29 83       	std	Y+1, r18	; 0x01
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	3a 81       	ldd	r19, Y+2	; 0x02
 180:	28 3e       	cpi	r18, 0xE8	; 232
 182:	33 40       	sbci	r19, 0x03	; 3
 184:	a9 f7       	brne	.-22     	; 0x170 <_Z8delay_msh+0x1c>
		ms--;
 186:	81 50       	subi	r24, 0x01	; 1
// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
 188:	61 f7       	brne	.-40     	; 0x162 <_Z8delay_msh+0xe>
		for (i=0; i != delay_count; i++);
		ms--;
	}
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:

//INT0 PB6     INT1 PA2
int main(){
	configura_portas();
 194:	d3 df       	rcall	.-90     	; 0x13c <_Z16configura_portasv>
	MCUCR |= (1 << ISC00) | (0 << ISC01); //Configura modo das interrupcoes
 196:	85 b7       	in	r24, 0x35	; 53
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0) | (1 << INT1); //Hobilita interrupcoes nos pinos (mas ainda nao estao ativas)
 19c:	8b b7       	in	r24, 0x3b	; 59
 19e:	80 6c       	ori	r24, 0xC0	; 192
 1a0:	8b bf       	out	0x3b, r24	; 59

	TCCR0B |= (1 << CS00) | (1 << CS01); //Configura timer que ira ler o sinal do receptor (pre scaler 64)
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0) | (1 << PWM1A) | (1 << PWM1B); // Configura PWM modo nao inversor, apenas PWM, sem o barrado
 1a8:	80 b7       	in	r24, 0x30	; 48
 1aa:	83 6a       	ori	r24, 0xA3	; 163
 1ac:	80 bf       	out	0x30, r24	; 48
	TCCR1B |= (1 << CS10); //Configura timer do gerador de PWM
 1ae:	8f b5       	in	r24, 0x2f	; 47
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1D |= (1 << WGM10); //Configura como FAST pwm
 1b4:	86 b5       	in	r24, 0x26	; 38
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	86 bd       	out	0x26, r24	; 38
	OCR1C = 255; //Seta o TOP da contagem do pwm
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	8b bd       	out	0x2b, r24	; 43
	OCR1A = 0;
 1be:	1d bc       	out	0x2d, r1	; 45
	OCR1A = 0;
 1c0:	1d bc       	out	0x2d, r1	; 45
	WDTCR |= (1 << WDE) | (1 << WDP0) | (1 << WDP1) | (1 << WDP2); //Habilita watchdog com reset a cada 0.5 s
 1c2:	81 b5       	in	r24, 0x21	; 33
 1c4:	8f 60       	ori	r24, 0x0F	; 15
 1c6:	81 bd       	out	0x21, r24	; 33
	
	sei(); //Ativa interrupçoes
 1c8:	78 94       	sei
	delay_ms(100);
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	c3 df       	rcall	.-122    	; 0x154 <_Z8delay_msh>
	int16_t pwm1, pwm2; //PWM1 = canal 1, pino B
						//PWM2 = canal 3, pino A
	int16_t direita, esquerda;
	bool safe_to_start = false;
	do{
		if ((((time_int_0 + 10) > 200) && ((time_int_0 - 10) < 200))) //Verifica se o robo esta no zero para poder comecar
 1ce:	80 91 64 00 	lds	r24, 0x0064
 1d2:	90 91 65 00 	lds	r25, 0x0065
 1d6:	0a 96       	adiw	r24, 0x0a	; 10
 1d8:	89 3c       	cpi	r24, 0xC9	; 201
 1da:	91 05       	cpc	r25, r1
 1dc:	c0 f3       	brcs	.-16     	; 0x1ce <main+0x3a>
 1de:	80 91 64 00 	lds	r24, 0x0064
 1e2:	90 91 65 00 	lds	r25, 0x0065
 1e6:	0a 97       	sbiw	r24, 0x0a	; 10
 1e8:	88 3c       	cpi	r24, 0xC8	; 200
 1ea:	91 05       	cpc	r25, r1
 1ec:	08 f4       	brcc	.+2      	; 0x1f0 <main+0x5c>
 1ee:	7f c0       	rjmp	.+254    	; 0x2ee <__stack+0x8f>
 1f0:	ee cf       	rjmp	.-36     	; 0x1ce <main+0x3a>
		{
			if ((((time_int_1 + 10) > 200) && ((time_int_1 - 10) < 200))) safe_to_start = true; //If em duas linhas para organizar. Dois canais tem que estar em zero
 1f2:	80 91 68 00 	lds	r24, 0x0068
 1f6:	90 91 69 00 	lds	r25, 0x0069
 1fa:	0a 97       	sbiw	r24, 0x0a	; 10
 1fc:	88 3c       	cpi	r24, 0xC8	; 200
 1fe:	91 05       	cpc	r25, r1
 200:	30 f7       	brcc	.-52     	; 0x1ce <main+0x3a>
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
			output_low(PORTB, PINB2);
		}
		else //Gira direita sentido anti-horario
		{
			OCR1A = (direita <= -255)?0:((direita & 0xFF)+ 255);
 202:	d0 e0       	ldi	r29, 0x00	; 0
			last_pow_esq = esquerda;
			asm("WDR");
		}
		if (direita > 0) //Gira direita sentido horario
		{
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
 204:	cf ef       	ldi	r28, 0xFF	; 255
	}while (!safe_to_start);
	//time_int_0 = 200; //equivalente a zero
	//time_int_1 = 200; //equivalente a zero
	while(1){
		//asm("WDR");
		pwm1 = 4.85*time_int_0 - 967; //Transforma sinal recebido na range desejada, entrada varia de 125 a 250
 206:	60 91 64 00 	lds	r22, 0x0064
 20a:	70 91 65 00 	lds	r23, 0x0065
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0d d1       	rcall	.+538    	; 0x42e <__floatunsisf>
 214:	23 e3       	ldi	r18, 0x33	; 51
 216:	33 e3       	ldi	r19, 0x33	; 51
 218:	4b e9       	ldi	r20, 0x9B	; 155
 21a:	50 e4       	ldi	r21, 0x40	; 64
 21c:	96 d1       	rcall	.+812    	; 0x54a <__mulsf3>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 ec       	ldi	r19, 0xC0	; 192
 222:	41 e7       	ldi	r20, 0x71	; 113
 224:	54 e4       	ldi	r21, 0x44	; 68
 226:	6d d0       	rcall	.+218    	; 0x302 <__subsf3>
 228:	d1 d0       	rcall	.+418    	; 0x3cc <__fixsfsi>
 22a:	6b 01       	movw	r12, r22
 22c:	7c 01       	movw	r14, r24
		pwm2 = 4.85*time_int_1 - 967; 
 22e:	60 91 68 00 	lds	r22, 0x0068
 232:	70 91 69 00 	lds	r23, 0x0069
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	f9 d0       	rcall	.+498    	; 0x42e <__floatunsisf>
 23c:	23 e3       	ldi	r18, 0x33	; 51
 23e:	33 e3       	ldi	r19, 0x33	; 51
 240:	4b e9       	ldi	r20, 0x9B	; 155
 242:	50 e4       	ldi	r21, 0x40	; 64
 244:	82 d1       	rcall	.+772    	; 0x54a <__mulsf3>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 ec       	ldi	r19, 0xC0	; 192
 24a:	41 e7       	ldi	r20, 0x71	; 113
 24c:	54 e4       	ldi	r21, 0x44	; 68
 24e:	59 d0       	rcall	.+178    	; 0x302 <__subsf3>
 250:	bd d0       	rcall	.+378    	; 0x3cc <__fixsfsi>
		direita = pwm2 + pwm1;
 252:	9b 01       	movw	r18, r22
 254:	2c 0d       	add	r18, r12
 256:	3d 1d       	adc	r19, r13
		esquerda = pwm2 - pwm1;
 258:	6c 19       	sub	r22, r12
 25a:	7d 09       	sbc	r23, r13
		
		if (!(((last_pow_dir + 15) > direita) && ((last_pow_dir - 15) < direita))) //Se ficou muito tempo no mesmo sinal nao reseta
 25c:	80 91 61 00 	lds	r24, 0x0061
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0f 96       	adiw	r24, 0x0f	; 15
 264:	28 17       	cp	r18, r24
 266:	39 07       	cpc	r19, r25
 268:	3c f4       	brge	.+14     	; 0x278 <__stack+0x19>
 26a:	80 91 61 00 	lds	r24, 0x0061
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0f 97       	sbiw	r24, 0x0f	; 15
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	1c f0       	brlt	.+6      	; 0x27e <__stack+0x1f>
		{
			last_pow_dir = direita;
 278:	20 93 61 00 	sts	0x0061, r18
			asm("WDR");
 27c:	a8 95       	wdr
		}
		if (!(((last_pow_esq + 15) > esquerda) && ((last_pow_esq - 15) < esquerda))) //Se ficou muito tempo no mesmo sinal nao reseta
 27e:	80 91 60 00 	lds	r24, 0x0060
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0f 96       	adiw	r24, 0x0f	; 15
 286:	68 17       	cp	r22, r24
 288:	79 07       	cpc	r23, r25
 28a:	3c f4       	brge	.+14     	; 0x29a <__stack+0x3b>
 28c:	80 91 60 00 	lds	r24, 0x0060
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0f 97       	sbiw	r24, 0x0f	; 15
 294:	86 17       	cp	r24, r22
 296:	97 07       	cpc	r25, r23
 298:	1c f0       	brlt	.+6      	; 0x2a0 <__stack+0x41>
		{
			last_pow_esq = esquerda;
 29a:	60 93 60 00 	sts	0x0060, r22
			asm("WDR");
 29e:	a8 95       	wdr
		}
		if (direita > 0) //Gira direita sentido horario
 2a0:	12 16       	cp	r1, r18
 2a2:	13 06       	cpc	r1, r19
 2a4:	3c f4       	brge	.+14     	; 0x2b4 <__stack+0x55>
		{
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
 2a6:	2f 3f       	cpi	r18, 0xFF	; 255
 2a8:	31 05       	cpc	r19, r1
 2aa:	0c f0       	brlt	.+2      	; 0x2ae <__stack+0x4f>
 2ac:	2c 2f       	mov	r18, r28
 2ae:	2d bd       	out	0x2d, r18	; 45
			output_low(PORTB, PINB2);
 2b0:	c2 98       	cbi	0x18, 2	; 24
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__stack+0x67>
		}
		else //Gira direita sentido anti-horario
		{
			OCR1A = (direita <= -255)?0:((direita & 0xFF)+ 255);
 2b4:	22 30       	cpi	r18, 0x02	; 2
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	38 07       	cpc	r19, r24
 2ba:	14 f0       	brlt	.+4      	; 0x2c0 <__stack+0x61>
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <__stack+0x63>
 2c0:	2d 2f       	mov	r18, r29
 2c2:	2d bd       	out	0x2d, r18	; 45
			output_high(PORTB, PINB2);
 2c4:	c2 9a       	sbi	0x18, 2	; 24
		}
		if (esquerda > 0) //Gira esquerda sentido horario
 2c6:	16 16       	cp	r1, r22
 2c8:	17 06       	cpc	r1, r23
 2ca:	3c f4       	brge	.+14     	; 0x2da <__stack+0x7b>
		{
			OCR1B = (esquerda >= 255)?255:(esquerda & 0xFF);
 2cc:	6f 3f       	cpi	r22, 0xFF	; 255
 2ce:	71 05       	cpc	r23, r1
 2d0:	0c f0       	brlt	.+2      	; 0x2d4 <__stack+0x75>
 2d2:	6c 2f       	mov	r22, r28
 2d4:	6c bd       	out	0x2c, r22	; 44
			output_low(PORTB, PINB0);
 2d6:	c0 98       	cbi	0x18, 0	; 24
 2d8:	96 cf       	rjmp	.-212    	; 0x206 <main+0x72>
		}
		else //Gira direita sentido anti-horario
		{
			OCR1B = (esquerda <= -255)?0:((esquerda & 0xFF) + 255);
 2da:	62 30       	cpi	r22, 0x02	; 2
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	78 07       	cpc	r23, r24
 2e0:	14 f0       	brlt	.+4      	; 0x2e6 <__stack+0x87>
 2e2:	61 50       	subi	r22, 0x01	; 1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <__stack+0x89>
 2e6:	6d 2f       	mov	r22, r29
 2e8:	6c bd       	out	0x2c, r22	; 44
			output_high(PORTB, PINB0);
 2ea:	c0 9a       	sbi	0x18, 0	; 24
 2ec:	8c cf       	rjmp	.-232    	; 0x206 <main+0x72>
	int16_t direita, esquerda;
	bool safe_to_start = false;
	do{
		if ((((time_int_0 + 10) > 200) && ((time_int_0 - 10) < 200))) //Verifica se o robo esta no zero para poder comecar
		{
			if ((((time_int_1 + 10) > 200) && ((time_int_1 - 10) < 200))) safe_to_start = true; //If em duas linhas para organizar. Dois canais tem que estar em zero
 2ee:	80 91 68 00 	lds	r24, 0x0068
 2f2:	90 91 69 00 	lds	r25, 0x0069
 2f6:	0a 96       	adiw	r24, 0x0a	; 10
 2f8:	89 3c       	cpi	r24, 0xC9	; 201
 2fa:	91 05       	cpc	r25, r1
 2fc:	08 f0       	brcs	.+2      	; 0x300 <__stack+0xa1>
 2fe:	79 cf       	rjmp	.-270    	; 0x1f2 <main+0x5e>
 300:	66 cf       	rjmp	.-308    	; 0x1ce <main+0x3a>

00000302 <__subsf3>:
 302:	50 58       	subi	r21, 0x80	; 128

00000304 <__addsf3>:
 304:	bb 27       	eor	r27, r27
 306:	aa 27       	eor	r26, r26
 308:	0e d0       	rcall	.+28     	; 0x326 <__addsf3x>
 30a:	e5 c0       	rjmp	.+458    	; 0x4d6 <__fp_round>
 30c:	d6 d0       	rcall	.+428    	; 0x4ba <__fp_pscA>
 30e:	30 f0       	brcs	.+12     	; 0x31c <__addsf3+0x18>
 310:	db d0       	rcall	.+438    	; 0x4c8 <__fp_pscB>
 312:	20 f0       	brcs	.+8      	; 0x31c <__addsf3+0x18>
 314:	31 f4       	brne	.+12     	; 0x322 <__addsf3+0x1e>
 316:	9f 3f       	cpi	r25, 0xFF	; 255
 318:	11 f4       	brne	.+4      	; 0x31e <__addsf3+0x1a>
 31a:	1e f4       	brtc	.+6      	; 0x322 <__addsf3+0x1e>
 31c:	cb c0       	rjmp	.+406    	; 0x4b4 <__fp_nan>
 31e:	0e f4       	brtc	.+2      	; 0x322 <__addsf3+0x1e>
 320:	e0 95       	com	r30
 322:	e7 fb       	bst	r30, 7
 324:	c1 c0       	rjmp	.+386    	; 0x4a8 <__fp_inf>

00000326 <__addsf3x>:
 326:	e9 2f       	mov	r30, r25
 328:	e7 d0       	rcall	.+462    	; 0x4f8 <__fp_split3>
 32a:	80 f3       	brcs	.-32     	; 0x30c <__addsf3+0x8>
 32c:	ba 17       	cp	r27, r26
 32e:	62 07       	cpc	r22, r18
 330:	73 07       	cpc	r23, r19
 332:	84 07       	cpc	r24, r20
 334:	95 07       	cpc	r25, r21
 336:	18 f0       	brcs	.+6      	; 0x33e <__addsf3x+0x18>
 338:	71 f4       	brne	.+28     	; 0x356 <__addsf3x+0x30>
 33a:	9e f5       	brtc	.+102    	; 0x3a2 <__addsf3x+0x7c>
 33c:	ff c0       	rjmp	.+510    	; 0x53c <__fp_zero>
 33e:	0e f4       	brtc	.+2      	; 0x342 <__addsf3x+0x1c>
 340:	e0 95       	com	r30
 342:	0b 2e       	mov	r0, r27
 344:	ba 2f       	mov	r27, r26
 346:	a0 2d       	mov	r26, r0
 348:	0b 01       	movw	r0, r22
 34a:	b9 01       	movw	r22, r18
 34c:	90 01       	movw	r18, r0
 34e:	0c 01       	movw	r0, r24
 350:	ca 01       	movw	r24, r20
 352:	a0 01       	movw	r20, r0
 354:	11 24       	eor	r1, r1
 356:	ff 27       	eor	r31, r31
 358:	59 1b       	sub	r21, r25
 35a:	99 f0       	breq	.+38     	; 0x382 <__addsf3x+0x5c>
 35c:	59 3f       	cpi	r21, 0xF9	; 249
 35e:	50 f4       	brcc	.+20     	; 0x374 <__addsf3x+0x4e>
 360:	50 3e       	cpi	r21, 0xE0	; 224
 362:	68 f1       	brcs	.+90     	; 0x3be <__addsf3x+0x98>
 364:	1a 16       	cp	r1, r26
 366:	f0 40       	sbci	r31, 0x00	; 0
 368:	a2 2f       	mov	r26, r18
 36a:	23 2f       	mov	r18, r19
 36c:	34 2f       	mov	r19, r20
 36e:	44 27       	eor	r20, r20
 370:	58 5f       	subi	r21, 0xF8	; 248
 372:	f3 cf       	rjmp	.-26     	; 0x35a <__addsf3x+0x34>
 374:	46 95       	lsr	r20
 376:	37 95       	ror	r19
 378:	27 95       	ror	r18
 37a:	a7 95       	ror	r26
 37c:	f0 40       	sbci	r31, 0x00	; 0
 37e:	53 95       	inc	r21
 380:	c9 f7       	brne	.-14     	; 0x374 <__addsf3x+0x4e>
 382:	7e f4       	brtc	.+30     	; 0x3a2 <__addsf3x+0x7c>
 384:	1f 16       	cp	r1, r31
 386:	ba 0b       	sbc	r27, r26
 388:	62 0b       	sbc	r22, r18
 38a:	73 0b       	sbc	r23, r19
 38c:	84 0b       	sbc	r24, r20
 38e:	ba f0       	brmi	.+46     	; 0x3be <__addsf3x+0x98>
 390:	91 50       	subi	r25, 0x01	; 1
 392:	a1 f0       	breq	.+40     	; 0x3bc <__addsf3x+0x96>
 394:	ff 0f       	add	r31, r31
 396:	bb 1f       	adc	r27, r27
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	c2 f7       	brpl	.-16     	; 0x390 <__addsf3x+0x6a>
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <__addsf3x+0x98>
 3a2:	ba 0f       	add	r27, r26
 3a4:	62 1f       	adc	r22, r18
 3a6:	73 1f       	adc	r23, r19
 3a8:	84 1f       	adc	r24, r20
 3aa:	48 f4       	brcc	.+18     	; 0x3be <__addsf3x+0x98>
 3ac:	87 95       	ror	r24
 3ae:	77 95       	ror	r23
 3b0:	67 95       	ror	r22
 3b2:	b7 95       	ror	r27
 3b4:	f7 95       	ror	r31
 3b6:	9e 3f       	cpi	r25, 0xFE	; 254
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <__addsf3x+0x96>
 3ba:	b3 cf       	rjmp	.-154    	; 0x322 <__addsf3+0x1e>
 3bc:	93 95       	inc	r25
 3be:	88 0f       	add	r24, r24
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__addsf3x+0x9e>
 3c2:	99 27       	eor	r25, r25
 3c4:	ee 0f       	add	r30, r30
 3c6:	97 95       	ror	r25
 3c8:	87 95       	ror	r24
 3ca:	08 95       	ret

000003cc <__fixsfsi>:
 3cc:	04 d0       	rcall	.+8      	; 0x3d6 <__fixunssfsi>
 3ce:	68 94       	set
 3d0:	b1 11       	cpse	r27, r1
 3d2:	b5 c0       	rjmp	.+362    	; 0x53e <__fp_szero>
 3d4:	08 95       	ret

000003d6 <__fixunssfsi>:
 3d6:	98 d0       	rcall	.+304    	; 0x508 <__fp_splitA>
 3d8:	88 f0       	brcs	.+34     	; 0x3fc <__fixunssfsi+0x26>
 3da:	9f 57       	subi	r25, 0x7F	; 127
 3dc:	90 f0       	brcs	.+36     	; 0x402 <__fixunssfsi+0x2c>
 3de:	b9 2f       	mov	r27, r25
 3e0:	99 27       	eor	r25, r25
 3e2:	b7 51       	subi	r27, 0x17	; 23
 3e4:	a0 f0       	brcs	.+40     	; 0x40e <__fixunssfsi+0x38>
 3e6:	d1 f0       	breq	.+52     	; 0x41c <__fixunssfsi+0x46>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	88 1f       	adc	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	1a f0       	brmi	.+6      	; 0x3f8 <__fixunssfsi+0x22>
 3f2:	ba 95       	dec	r27
 3f4:	c9 f7       	brne	.-14     	; 0x3e8 <__fixunssfsi+0x12>
 3f6:	12 c0       	rjmp	.+36     	; 0x41c <__fixunssfsi+0x46>
 3f8:	b1 30       	cpi	r27, 0x01	; 1
 3fa:	81 f0       	breq	.+32     	; 0x41c <__fixunssfsi+0x46>
 3fc:	9f d0       	rcall	.+318    	; 0x53c <__fp_zero>
 3fe:	b1 e0       	ldi	r27, 0x01	; 1
 400:	08 95       	ret
 402:	9c c0       	rjmp	.+312    	; 0x53c <__fp_zero>
 404:	67 2f       	mov	r22, r23
 406:	78 2f       	mov	r23, r24
 408:	88 27       	eor	r24, r24
 40a:	b8 5f       	subi	r27, 0xF8	; 248
 40c:	39 f0       	breq	.+14     	; 0x41c <__fixunssfsi+0x46>
 40e:	b9 3f       	cpi	r27, 0xF9	; 249
 410:	cc f3       	brlt	.-14     	; 0x404 <__fixunssfsi+0x2e>
 412:	86 95       	lsr	r24
 414:	77 95       	ror	r23
 416:	67 95       	ror	r22
 418:	b3 95       	inc	r27
 41a:	d9 f7       	brne	.-10     	; 0x412 <__fixunssfsi+0x3c>
 41c:	3e f4       	brtc	.+14     	; 0x42c <__fixunssfsi+0x56>
 41e:	90 95       	com	r25
 420:	80 95       	com	r24
 422:	70 95       	com	r23
 424:	61 95       	neg	r22
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	8f 4f       	sbci	r24, 0xFF	; 255
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	08 95       	ret

0000042e <__floatunsisf>:
 42e:	e8 94       	clt
 430:	09 c0       	rjmp	.+18     	; 0x444 <__floatsisf+0x12>

00000432 <__floatsisf>:
 432:	97 fb       	bst	r25, 7
 434:	3e f4       	brtc	.+14     	; 0x444 <__floatsisf+0x12>
 436:	90 95       	com	r25
 438:	80 95       	com	r24
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	99 23       	and	r25, r25
 446:	a9 f0       	breq	.+42     	; 0x472 <__floatsisf+0x40>
 448:	f9 2f       	mov	r31, r25
 44a:	96 e9       	ldi	r25, 0x96	; 150
 44c:	bb 27       	eor	r27, r27
 44e:	93 95       	inc	r25
 450:	f6 95       	lsr	r31
 452:	87 95       	ror	r24
 454:	77 95       	ror	r23
 456:	67 95       	ror	r22
 458:	b7 95       	ror	r27
 45a:	f1 11       	cpse	r31, r1
 45c:	f8 cf       	rjmp	.-16     	; 0x44e <__floatsisf+0x1c>
 45e:	fa f4       	brpl	.+62     	; 0x49e <__floatsisf+0x6c>
 460:	bb 0f       	add	r27, r27
 462:	11 f4       	brne	.+4      	; 0x468 <__floatsisf+0x36>
 464:	60 ff       	sbrs	r22, 0
 466:	1b c0       	rjmp	.+54     	; 0x49e <__floatsisf+0x6c>
 468:	6f 5f       	subi	r22, 0xFF	; 255
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	8f 4f       	sbci	r24, 0xFF	; 255
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	16 c0       	rjmp	.+44     	; 0x49e <__floatsisf+0x6c>
 472:	88 23       	and	r24, r24
 474:	11 f0       	breq	.+4      	; 0x47a <__floatsisf+0x48>
 476:	96 e9       	ldi	r25, 0x96	; 150
 478:	11 c0       	rjmp	.+34     	; 0x49c <__floatsisf+0x6a>
 47a:	77 23       	and	r23, r23
 47c:	21 f0       	breq	.+8      	; 0x486 <__floatsisf+0x54>
 47e:	9e e8       	ldi	r25, 0x8E	; 142
 480:	87 2f       	mov	r24, r23
 482:	76 2f       	mov	r23, r22
 484:	05 c0       	rjmp	.+10     	; 0x490 <__floatsisf+0x5e>
 486:	66 23       	and	r22, r22
 488:	71 f0       	breq	.+28     	; 0x4a6 <__floatsisf+0x74>
 48a:	96 e8       	ldi	r25, 0x86	; 134
 48c:	86 2f       	mov	r24, r22
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	2a f0       	brmi	.+10     	; 0x49e <__floatsisf+0x6c>
 494:	9a 95       	dec	r25
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	da f7       	brpl	.-10     	; 0x494 <__floatsisf+0x62>
 49e:	88 0f       	add	r24, r24
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
 4a4:	97 f9       	bld	r25, 7
 4a6:	08 95       	ret

000004a8 <__fp_inf>:
 4a8:	97 f9       	bld	r25, 7
 4aa:	9f 67       	ori	r25, 0x7F	; 127
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	08 95       	ret

000004b4 <__fp_nan>:
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	08 95       	ret

000004ba <__fp_pscA>:
 4ba:	00 24       	eor	r0, r0
 4bc:	0a 94       	dec	r0
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	18 06       	cpc	r1, r24
 4c4:	09 06       	cpc	r0, r25
 4c6:	08 95       	ret

000004c8 <__fp_pscB>:
 4c8:	00 24       	eor	r0, r0
 4ca:	0a 94       	dec	r0
 4cc:	12 16       	cp	r1, r18
 4ce:	13 06       	cpc	r1, r19
 4d0:	14 06       	cpc	r1, r20
 4d2:	05 06       	cpc	r0, r21
 4d4:	08 95       	ret

000004d6 <__fp_round>:
 4d6:	09 2e       	mov	r0, r25
 4d8:	03 94       	inc	r0
 4da:	00 0c       	add	r0, r0
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__fp_round+0xc>
 4de:	88 23       	and	r24, r24
 4e0:	52 f0       	brmi	.+20     	; 0x4f6 <__fp_round+0x20>
 4e2:	bb 0f       	add	r27, r27
 4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__fp_round+0x20>
 4e6:	bf 2b       	or	r27, r31
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__fp_round+0x18>
 4ea:	60 ff       	sbrs	r22, 0
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__fp_round+0x20>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__fp_split3>:
 4f8:	57 fd       	sbrc	r21, 7
 4fa:	90 58       	subi	r25, 0x80	; 128
 4fc:	44 0f       	add	r20, r20
 4fe:	55 1f       	adc	r21, r21
 500:	59 f0       	breq	.+22     	; 0x518 <__fp_splitA+0x10>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	71 f0       	breq	.+28     	; 0x522 <__fp_splitA+0x1a>
 506:	47 95       	ror	r20

00000508 <__fp_splitA>:
 508:	88 0f       	add	r24, r24
 50a:	97 fb       	bst	r25, 7
 50c:	99 1f       	adc	r25, r25
 50e:	61 f0       	breq	.+24     	; 0x528 <__fp_splitA+0x20>
 510:	9f 3f       	cpi	r25, 0xFF	; 255
 512:	79 f0       	breq	.+30     	; 0x532 <__fp_splitA+0x2a>
 514:	87 95       	ror	r24
 516:	08 95       	ret
 518:	12 16       	cp	r1, r18
 51a:	13 06       	cpc	r1, r19
 51c:	14 06       	cpc	r1, r20
 51e:	55 1f       	adc	r21, r21
 520:	f2 cf       	rjmp	.-28     	; 0x506 <__fp_split3+0xe>
 522:	46 95       	lsr	r20
 524:	f1 df       	rcall	.-30     	; 0x508 <__fp_splitA>
 526:	08 c0       	rjmp	.+16     	; 0x538 <__fp_splitA+0x30>
 528:	16 16       	cp	r1, r22
 52a:	17 06       	cpc	r1, r23
 52c:	18 06       	cpc	r1, r24
 52e:	99 1f       	adc	r25, r25
 530:	f1 cf       	rjmp	.-30     	; 0x514 <__fp_splitA+0xc>
 532:	86 95       	lsr	r24
 534:	71 05       	cpc	r23, r1
 536:	61 05       	cpc	r22, r1
 538:	08 94       	sec
 53a:	08 95       	ret

0000053c <__fp_zero>:
 53c:	e8 94       	clt

0000053e <__fp_szero>:
 53e:	bb 27       	eor	r27, r27
 540:	66 27       	eor	r22, r22
 542:	77 27       	eor	r23, r23
 544:	cb 01       	movw	r24, r22
 546:	97 f9       	bld	r25, 7
 548:	08 95       	ret

0000054a <__mulsf3>:
 54a:	0a d0       	rcall	.+20     	; 0x560 <__mulsf3x>
 54c:	c4 cf       	rjmp	.-120    	; 0x4d6 <__fp_round>
 54e:	b5 df       	rcall	.-150    	; 0x4ba <__fp_pscA>
 550:	28 f0       	brcs	.+10     	; 0x55c <__mulsf3+0x12>
 552:	ba df       	rcall	.-140    	; 0x4c8 <__fp_pscB>
 554:	18 f0       	brcs	.+6      	; 0x55c <__mulsf3+0x12>
 556:	95 23       	and	r25, r21
 558:	09 f0       	breq	.+2      	; 0x55c <__mulsf3+0x12>
 55a:	a6 cf       	rjmp	.-180    	; 0x4a8 <__fp_inf>
 55c:	ab cf       	rjmp	.-170    	; 0x4b4 <__fp_nan>
 55e:	ef cf       	rjmp	.-34     	; 0x53e <__fp_szero>

00000560 <__mulsf3x>:
 560:	cb df       	rcall	.-106    	; 0x4f8 <__fp_split3>
 562:	a8 f3       	brcs	.-22     	; 0x54e <__mulsf3+0x4>

00000564 <__mulsf3_pse>:
 564:	99 23       	and	r25, r25
 566:	d9 f3       	breq	.-10     	; 0x55e <__mulsf3+0x14>
 568:	55 23       	and	r21, r21
 56a:	c9 f3       	breq	.-14     	; 0x55e <__mulsf3+0x14>
 56c:	95 0f       	add	r25, r21
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	55 1f       	adc	r21, r21
 572:	aa 27       	eor	r26, r26
 574:	ee 27       	eor	r30, r30
 576:	ff 27       	eor	r31, r31
 578:	bb 27       	eor	r27, r27
 57a:	00 24       	eor	r0, r0
 57c:	08 94       	sec
 57e:	67 95       	ror	r22
 580:	20 f4       	brcc	.+8      	; 0x58a <__mulsf3_pse+0x26>
 582:	e2 0f       	add	r30, r18
 584:	f3 1f       	adc	r31, r19
 586:	b4 1f       	adc	r27, r20
 588:	0a 1e       	adc	r0, r26
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	44 1f       	adc	r20, r20
 590:	aa 1f       	adc	r26, r26
 592:	66 95       	lsr	r22
 594:	a9 f7       	brne	.-22     	; 0x580 <__mulsf3_pse+0x1c>
 596:	77 95       	ror	r23
 598:	30 f4       	brcc	.+12     	; 0x5a6 <__mulsf3_pse+0x42>
 59a:	f3 0f       	add	r31, r19
 59c:	b4 1f       	adc	r27, r20
 59e:	0a 1e       	adc	r0, r26
 5a0:	12 1e       	adc	r1, r18
 5a2:	08 f4       	brcc	.+2      	; 0x5a6 <__mulsf3_pse+0x42>
 5a4:	63 95       	inc	r22
 5a6:	33 0f       	add	r19, r19
 5a8:	44 1f       	adc	r20, r20
 5aa:	aa 1f       	adc	r26, r26
 5ac:	22 1f       	adc	r18, r18
 5ae:	76 95       	lsr	r23
 5b0:	99 f7       	brne	.-26     	; 0x598 <__mulsf3_pse+0x34>
 5b2:	87 95       	ror	r24
 5b4:	20 f4       	brcc	.+8      	; 0x5be <__mulsf3_pse+0x5a>
 5b6:	b4 0f       	add	r27, r20
 5b8:	0a 1e       	adc	r0, r26
 5ba:	12 1e       	adc	r1, r18
 5bc:	63 1f       	adc	r22, r19
 5be:	44 0f       	add	r20, r20
 5c0:	aa 1f       	adc	r26, r26
 5c2:	22 1f       	adc	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	86 95       	lsr	r24
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__mulsf3_pse+0x50>
 5ca:	86 2f       	mov	r24, r22
 5cc:	71 2d       	mov	r23, r1
 5ce:	60 2d       	mov	r22, r0
 5d0:	11 24       	eor	r1, r1
 5d2:	9f 57       	subi	r25, 0x7F	; 127
 5d4:	50 40       	sbci	r21, 0x00	; 0
 5d6:	8a f0       	brmi	.+34     	; 0x5fa <__mulsf3_pse+0x96>
 5d8:	e1 f0       	breq	.+56     	; 0x612 <__mulsf3_pse+0xae>
 5da:	88 23       	and	r24, r24
 5dc:	4a f0       	brmi	.+18     	; 0x5f0 <__mulsf3_pse+0x8c>
 5de:	ee 0f       	add	r30, r30
 5e0:	ff 1f       	adc	r31, r31
 5e2:	bb 1f       	adc	r27, r27
 5e4:	66 1f       	adc	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	91 50       	subi	r25, 0x01	; 1
 5ec:	50 40       	sbci	r21, 0x00	; 0
 5ee:	a9 f7       	brne	.-22     	; 0x5da <__mulsf3_pse+0x76>
 5f0:	9e 3f       	cpi	r25, 0xFE	; 254
 5f2:	51 05       	cpc	r21, r1
 5f4:	70 f0       	brcs	.+28     	; 0x612 <__mulsf3_pse+0xae>
 5f6:	58 cf       	rjmp	.-336    	; 0x4a8 <__fp_inf>
 5f8:	a2 cf       	rjmp	.-188    	; 0x53e <__fp_szero>
 5fa:	5f 3f       	cpi	r21, 0xFF	; 255
 5fc:	ec f3       	brlt	.-6      	; 0x5f8 <__mulsf3_pse+0x94>
 5fe:	98 3e       	cpi	r25, 0xE8	; 232
 600:	dc f3       	brlt	.-10     	; 0x5f8 <__mulsf3_pse+0x94>
 602:	86 95       	lsr	r24
 604:	77 95       	ror	r23
 606:	67 95       	ror	r22
 608:	b7 95       	ror	r27
 60a:	f7 95       	ror	r31
 60c:	e7 95       	ror	r30
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	c1 f7       	brne	.-16     	; 0x602 <__mulsf3_pse+0x9e>
 612:	fe 2b       	or	r31, r30
 614:	88 0f       	add	r24, r24
 616:	91 1d       	adc	r25, r1
 618:	96 95       	lsr	r25
 61a:	87 95       	ror	r24
 61c:	97 f9       	bld	r25, 7
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
