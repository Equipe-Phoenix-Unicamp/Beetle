
Beetle C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000682  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  000006f6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000347  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000178  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d3  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000256  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000030a  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	53 c0       	rjmp	.+166    	; 0xc2 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	a8 d0       	rcall	.+336    	; 0x194 <main>
  44:	1c c3       	rjmp	.+1592   	; 0x67e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
volatile uint16_t time_int_0_before = 0;

volatile int16_t last_pow_dir = 0;
volatile int16_t last_pow_esq = 0;

ISR(INT0_vect){ //Interrupcao chamada quando pino muda de estado
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	if (PINB & (1 << PINB6)) //Pino foi para alto
  5a:	b6 9b       	sbis	0x16, 6	; 22
  5c:	07 c0       	rjmp	.+14     	; 0x6c <__vector_1+0x24>
	{
		time_int_0_before = TCNT0L; //Salva tempo
  5e:	82 b7       	in	r24, 0x32	; 50
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	90 93 65 00 	sts	0x0065, r25
  66:	80 93 64 00 	sts	0x0064, r24
  6a:	22 c0       	rjmp	.+68     	; 0xb0 <__vector_1+0x68>
	}
	else //Pino foi para baixo
	{
		if ((TCNT0L - time_int_0_before) > 120 && (TCNT0L - time_int_0_before) < 255) 
  6c:	82 b7       	in	r24, 0x32	; 50
  6e:	20 91 64 00 	lds	r18, 0x0064
  72:	30 91 65 00 	lds	r19, 0x0065
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	82 1b       	sub	r24, r18
  7a:	93 0b       	sbc	r25, r19
  7c:	89 37       	cpi	r24, 0x79	; 121
  7e:	91 05       	cpc	r25, r1
  80:	b8 f0       	brcs	.+46     	; 0xb0 <__vector_1+0x68>
  82:	82 b7       	in	r24, 0x32	; 50
  84:	20 91 64 00 	lds	r18, 0x0064
  88:	30 91 65 00 	lds	r19, 0x0065
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	82 1b       	sub	r24, r18
  90:	93 0b       	sbc	r25, r19
  92:	8f 3f       	cpi	r24, 0xFF	; 255
  94:	91 05       	cpc	r25, r1
  96:	60 f4       	brcc	.+24     	; 0xb0 <__vector_1+0x68>
		{
			time_int_0 = TCNT0L - time_int_0_before; //Salva diferenca de tempo para calculo do pwm
  98:	82 b7       	in	r24, 0x32	; 50
  9a:	20 91 64 00 	lds	r18, 0x0064
  9e:	30 91 65 00 	lds	r19, 0x0065
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	82 1b       	sub	r24, r18
  a6:	93 0b       	sbc	r25, r19
  a8:	90 93 67 00 	sts	0x0067, r25
  ac:	80 93 66 00 	sts	0x0066, r24
		}
	}
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	3f 91       	pop	r19
  b6:	2f 91       	pop	r18
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_13>:

ISR(INT1_vect){ //Vide funcao acima
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	if (PINA & (1 << PINA2))	
  d4:	ca 9b       	sbis	0x19, 2	; 25
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <__vector_13+0x24>
	{
		time_int_1_before = TCNT0L;
  d8:	82 b7       	in	r24, 0x32	; 50
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 69 00 	sts	0x0069, r25
  e0:	80 93 68 00 	sts	0x0068, r24
  e4:	22 c0       	rjmp	.+68     	; 0x12a <__vector_13+0x68>
	}
	else
	{
		if ((TCNT0L - time_int_1_before) > 120 && (TCNT0L - time_int_1_before) < 255)
  e6:	82 b7       	in	r24, 0x32	; 50
  e8:	20 91 68 00 	lds	r18, 0x0068
  ec:	30 91 69 00 	lds	r19, 0x0069
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	82 1b       	sub	r24, r18
  f4:	93 0b       	sbc	r25, r19
  f6:	89 37       	cpi	r24, 0x79	; 121
  f8:	91 05       	cpc	r25, r1
  fa:	b8 f0       	brcs	.+46     	; 0x12a <__vector_13+0x68>
  fc:	82 b7       	in	r24, 0x32	; 50
  fe:	20 91 68 00 	lds	r18, 0x0068
 102:	30 91 69 00 	lds	r19, 0x0069
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	82 1b       	sub	r24, r18
 10a:	93 0b       	sbc	r25, r19
 10c:	8f 3f       	cpi	r24, 0xFF	; 255
 10e:	91 05       	cpc	r25, r1
 110:	60 f4       	brcc	.+24     	; 0x12a <__vector_13+0x68>
		{
			time_int_1 = TCNT0L - time_int_1_before;
 112:	82 b7       	in	r24, 0x32	; 50
 114:	20 91 68 00 	lds	r18, 0x0068
 118:	30 91 69 00 	lds	r19, 0x0069
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	82 1b       	sub	r24, r18
 120:	93 0b       	sbc	r25, r19
 122:	90 93 6b 00 	sts	0x006B, r25
 126:	80 93 6a 00 	sts	0x006A, r24
		}
	}
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <_Z16configura_portasv>:

//configura os inputs e outputs
void configura_portas (){
	//define as portas como saída
	set_output(DDRB, PB0);
 13c:	b8 9a       	sbi	0x17, 0	; 23
	set_output(DDRB, PB1);
 13e:	b9 9a       	sbi	0x17, 1	; 23
	set_output(DDRB, PB2);
 140:	ba 9a       	sbi	0x17, 2	; 23
	set_output(DDRB, PB3);
 142:	bb 9a       	sbi	0x17, 3	; 23
	//define as portas como entrada
	set_input(DDRB, PB4);
 144:	bc 98       	cbi	0x17, 4	; 23
	set_input(DDRB, PB5);
 146:	bd 98       	cbi	0x17, 5	; 23
	set_input(DDRB, PB6);
 148:	be 98       	cbi	0x17, 6	; 23
	set_input(DDRB, PB7);
 14a:	bf 98       	cbi	0x17, 7	; 23
	set_input(DDRA, PA0);
 14c:	d0 98       	cbi	0x1a, 0	; 26
	set_input(DDRA, PA1);
 14e:	d1 98       	cbi	0x1a, 1	; 26
	set_input(DDRA, PA2);
 150:	d2 98       	cbi	0x1a, 2	; 26
 152:	08 95       	ret

00000154 <_Z8delay_msh>:
}

// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	00 d0       	rcall	.+0      	; 0x15a <_Z8delay_msh+0x6>
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
 15e:	88 23       	and	r24, r24
 160:	a1 f0       	breq	.+40     	; 0x18a <_Z8delay_msh+0x36>
		for (i=0; i != delay_count; i++);
 162:	1a 82       	std	Y+2, r1	; 0x02
 164:	19 82       	std	Y+1, r1	; 0x01
 166:	29 81       	ldd	r18, Y+1	; 0x01
 168:	3a 81       	ldd	r19, Y+2	; 0x02
 16a:	28 3e       	cpi	r18, 0xE8	; 232
 16c:	33 40       	sbci	r19, 0x03	; 3
 16e:	59 f0       	breq	.+22     	; 0x186 <_Z8delay_msh+0x32>
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	3a 83       	std	Y+2, r19	; 0x02
 17a:	29 83       	std	Y+1, r18	; 0x01
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	3a 81       	ldd	r19, Y+2	; 0x02
 180:	28 3e       	cpi	r18, 0xE8	; 232
 182:	33 40       	sbci	r19, 0x03	; 3
 184:	a9 f7       	brne	.-22     	; 0x170 <_Z8delay_msh+0x1c>
		ms--;
 186:	81 50       	subi	r24, 0x01	; 1
// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
 188:	61 f7       	brne	.-40     	; 0x162 <_Z8delay_msh+0xe>
		for (i=0; i != delay_count; i++);
		ms--;
	}
}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
	return (a > 0)?a:-a;
}

//INT0 PB6     INT1 PA2
int main(){
	configura_portas();
 194:	d3 df       	rcall	.-90     	; 0x13c <_Z16configura_portasv>
	
	MCUCR |= (1 << ISC00) | (0 << ISC01); //Configura modo das interrupcoes
 196:	85 b7       	in	r24, 0x35	; 53
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0) | (1 << INT1); //Hobilita interrupcoes nos pinos (mas ainda nao estao ativas)
 19c:	8b b7       	in	r24, 0x3b	; 59
 19e:	80 6c       	ori	r24, 0xC0	; 192
 1a0:	8b bf       	out	0x3b, r24	; 59

	TCCR0B |= (1 << CS00) | (1 << CS01); //Configura timer que ira ler o sinal do receptor (pre scaler 64)
 1a2:	83 b7       	in	r24, 0x33	; 51
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0) | (1 << PWM1A) | (1 << PWM1B); // Configura PWM modo nao inversor, apenas PWM, sem o barrado
 1a8:	80 b7       	in	r24, 0x30	; 48
 1aa:	83 6a       	ori	r24, 0xA3	; 163
 1ac:	80 bf       	out	0x30, r24	; 48
	TCCR1B |= (1 << CS10); //Configura timer do gerador de PWM
 1ae:	8f b5       	in	r24, 0x2f	; 47
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1D |= (1 << WGM10); //Configura como FAST pwm
 1b4:	86 b5       	in	r24, 0x26	; 38
 1b6:	81 60       	ori	r24, 0x01	; 1
 1b8:	86 bd       	out	0x26, r24	; 38
	OCR1C = 255; //Seta o TOP da contagem do pwm
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	8b bd       	out	0x2b, r24	; 43
	WDTCR |= (1 << WDE) | (0 << WDP0) | (0 << WDP1) | (0 << WDP2) | (1 << WDP3); //Habilita watchdog com reset a cada 2 s
 1be:	81 b5       	in	r24, 0x21	; 33
 1c0:	88 62       	ori	r24, 0x28	; 40
 1c2:	81 bd       	out	0x21, r24	; 33
	
	OCR1A = 0;
 1c4:	1d bc       	out	0x2d, r1	; 45
	OCR1B = 0;
 1c6:	1c bc       	out	0x2c, r1	; 44
	
	sei(); //Ativa interrupçoes
 1c8:	78 94       	sei
	delay_ms(100);
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	c3 df       	rcall	.-122    	; 0x154 <_Z8delay_msh>
	int16_t pwm1 = 0, pwm2 = 0; //PWM1 = canal 1, pino B
						//PWM2 = canal 3, pino A
	int16_t direita = 0, esquerda = 0;
	bool safe_to_start = false;
	do{
		if (absolute(time_int_0 - 200) <= 10) //Verifica se o robo esta no zero para poder comecar
 1ce:	20 91 66 00 	lds	r18, 0x0066
 1d2:	30 91 67 00 	lds	r19, 0x0067
 1d6:	28 5c       	subi	r18, 0xC8	; 200
 1d8:	31 09       	sbc	r19, r1
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 1da:	c9 01       	movw	r24, r18
 1dc:	99 23       	and	r25, r25
 1de:	24 f4       	brge	.+8      	; 0x1e8 <main+0x54>
 1e0:	88 27       	eor	r24, r24
 1e2:	99 27       	eor	r25, r25
 1e4:	82 1b       	sub	r24, r18
 1e6:	93 0b       	sbc	r25, r19
	int16_t pwm1 = 0, pwm2 = 0; //PWM1 = canal 1, pino B
						//PWM2 = canal 3, pino A
	int16_t direita = 0, esquerda = 0;
	bool safe_to_start = false;
	do{
		if (absolute(time_int_0 - 200) <= 10) //Verifica se o robo esta no zero para poder comecar
 1e8:	0b 97       	sbiw	r24, 0x0b	; 11
 1ea:	8c f7       	brge	.-30     	; 0x1ce <main+0x3a>
		{
			if (absolute(time_int_1 - 200) <= 10) safe_to_start = true; //If em duas linhas para organizar. Dois canais tem que estar em zero
 1ec:	20 91 6a 00 	lds	r18, 0x006A
 1f0:	30 91 6b 00 	lds	r19, 0x006B
 1f4:	28 5c       	subi	r18, 0xC8	; 200
 1f6:	31 09       	sbc	r19, r1
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 1f8:	c9 01       	movw	r24, r18
 1fa:	99 23       	and	r25, r25
 1fc:	24 f4       	brge	.+8      	; 0x206 <main+0x72>
 1fe:	88 27       	eor	r24, r24
 200:	99 27       	eor	r25, r25
 202:	82 1b       	sub	r24, r18
 204:	93 0b       	sbc	r25, r19
	int16_t direita = 0, esquerda = 0;
	bool safe_to_start = false;
	do{
		if (absolute(time_int_0 - 200) <= 10) //Verifica se o robo esta no zero para poder comecar
		{
			if (absolute(time_int_1 - 200) <= 10) safe_to_start = true; //If em duas linhas para organizar. Dois canais tem que estar em zero
 206:	0b 97       	sbiw	r24, 0x0b	; 11
 208:	14 f7       	brge	.-60     	; 0x1ce <main+0x3a>
		}
	}while (!safe_to_start);
	time_int_0 = 200; //equivalente a zero
 20a:	88 ec       	ldi	r24, 0xC8	; 200
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 67 00 	sts	0x0067, r25
 212:	80 93 66 00 	sts	0x0066, r24
	time_int_1 = 200; //equivalente a zero
 216:	90 93 6b 00 	sts	0x006B, r25
 21a:	80 93 6a 00 	sts	0x006A, r24
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
			output_low(PORTB, PINB0);
		}
		else //Gira direita sentido anti-horario
		{
			OCR1A = (direita <= -255)?0:(direita & 0xFF);
 21e:	00 e0       	ldi	r16, 0x00	; 0
			last_pow_esq = esquerda;
			asm("WDR");
		}
		if (direita >= 0) //Gira direita sentido horario
		{
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
 220:	1f ef       	ldi	r17, 0xFF	; 255
		}
	}while (!safe_to_start);
	time_int_0 = 200; //equivalente a zero
	time_int_1 = 200; //equivalente a zero
	while(1){
		pwm1 = 4.85*time_int_0 - 967; //Transforma sinal recebido na range desejada, entrada varia de 125 a 250
 222:	60 91 66 00 	lds	r22, 0x0066
 226:	70 91 67 00 	lds	r23, 0x0067
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2e d1       	rcall	.+604    	; 0x48c <__floatunsisf>
 230:	23 e3       	ldi	r18, 0x33	; 51
 232:	33 e3       	ldi	r19, 0x33	; 51
 234:	4b e9       	ldi	r20, 0x9B	; 155
 236:	50 e4       	ldi	r21, 0x40	; 64
 238:	b7 d1       	rcall	.+878    	; 0x5a8 <__mulsf3>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 ec       	ldi	r19, 0xC0	; 192
 23e:	41 e7       	ldi	r20, 0x71	; 113
 240:	54 e4       	ldi	r21, 0x44	; 68
 242:	8e d0       	rcall	.+284    	; 0x360 <__subsf3>
 244:	f2 d0       	rcall	.+484    	; 0x42a <__fixsfsi>
 246:	6b 01       	movw	r12, r22
 248:	7c 01       	movw	r14, r24
		pwm2 = 4.85*time_int_1 - 967; 
 24a:	60 91 6a 00 	lds	r22, 0x006A
 24e:	70 91 6b 00 	lds	r23, 0x006B
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	1a d1       	rcall	.+564    	; 0x48c <__floatunsisf>
 258:	23 e3       	ldi	r18, 0x33	; 51
 25a:	33 e3       	ldi	r19, 0x33	; 51
 25c:	4b e9       	ldi	r20, 0x9B	; 155
 25e:	50 e4       	ldi	r21, 0x40	; 64
 260:	a3 d1       	rcall	.+838    	; 0x5a8 <__mulsf3>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 ec       	ldi	r19, 0xC0	; 192
 266:	41 e7       	ldi	r20, 0x71	; 113
 268:	54 e4       	ldi	r21, 0x44	; 68
 26a:	7a d0       	rcall	.+244    	; 0x360 <__subsf3>
 26c:	de d0       	rcall	.+444    	; 0x42a <__fixsfsi>
		direita = pwm2 + pwm1;
 26e:	eb 01       	movw	r28, r22
 270:	cc 0d       	add	r28, r12
 272:	dd 1d       	adc	r29, r13
		esquerda = pwm2 - pwm1;
 274:	7b 01       	movw	r14, r22
 276:	ec 18       	sub	r14, r12
 278:	fd 08       	sbc	r15, r13
		
		if (!(PINA & (1 << PINA1)))
 27a:	c9 99       	sbic	0x19, 1	; 25
 27c:	04 c0       	rjmp	.+8      	; 0x286 <__stack+0x27>
		{
			OCR1B = 0;
 27e:	1c bc       	out	0x2c, r1	; 44
			output_low(PORTB, PINB2);
 280:	c2 98       	cbi	0x18, 2	; 24
			delay_ms(50);
 282:	82 e3       	ldi	r24, 0x32	; 50
 284:	67 df       	rcall	.-306    	; 0x154 <_Z8delay_msh>
		}
		
		if (!(PINA & (1 << PINA0)))
 286:	c8 99       	sbic	0x19, 0	; 25
 288:	04 c0       	rjmp	.+8      	; 0x292 <__stack+0x33>
		{
			OCR1A = 0;
 28a:	1d bc       	out	0x2d, r1	; 45
			output_low(PORTB, PINB0);
 28c:	c0 98       	cbi	0x18, 0	; 24
			delay_ms(50);
 28e:	82 e3       	ldi	r24, 0x32	; 50
 290:	61 df       	rcall	.-318    	; 0x154 <_Z8delay_msh>
		}
		
		if (absolute(direita - last_pow_dir) <= 10 || absolute(direita-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 292:	80 91 62 00 	lds	r24, 0x0062
 296:	90 91 63 00 	lds	r25, 0x0063
 29a:	9e 01       	movw	r18, r28
 29c:	28 1b       	sub	r18, r24
 29e:	39 0b       	sbc	r19, r25
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 2a0:	c9 01       	movw	r24, r18
 2a2:	99 23       	and	r25, r25
 2a4:	24 f4       	brge	.+8      	; 0x2ae <__stack+0x4f>
 2a6:	88 27       	eor	r24, r24
 2a8:	99 27       	eor	r25, r25
 2aa:	82 1b       	sub	r24, r18
 2ac:	93 0b       	sbc	r25, r19
			OCR1A = 0;
			output_low(PORTB, PINB0);
			delay_ms(50);
		}
		
		if (absolute(direita - last_pow_dir) <= 10 || absolute(direita-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 2ae:	0b 97       	sbiw	r24, 0x0b	; 11
 2b0:	64 f0       	brlt	.+24     	; 0x2ca <__stack+0x6b>
 2b2:	9e 01       	movw	r18, r28
 2b4:	28 5c       	subi	r18, 0xC8	; 200
 2b6:	31 09       	sbc	r19, r1
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 2b8:	c9 01       	movw	r24, r18
 2ba:	99 23       	and	r25, r25
 2bc:	24 f4       	brge	.+8      	; 0x2c6 <__stack+0x67>
 2be:	88 27       	eor	r24, r24
 2c0:	99 27       	eor	r25, r25
 2c2:	82 1b       	sub	r24, r18
 2c4:	93 0b       	sbc	r25, r19
			OCR1A = 0;
			output_low(PORTB, PINB0);
			delay_ms(50);
		}
		
		if (absolute(direita - last_pow_dir) <= 10 || absolute(direita-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 2c6:	0b 97       	sbiw	r24, 0x0b	; 11
 2c8:	2c f4       	brge	.+10     	; 0x2d4 <__stack+0x75>
		{
			last_pow_dir = direita;
 2ca:	d0 93 63 00 	sts	0x0063, r29
 2ce:	c0 93 62 00 	sts	0x0062, r28
			asm("WDR");
 2d2:	a8 95       	wdr
		}
		if (absolute(esquerda - last_pow_esq) <= 10 || absolute(esquerda-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 2d4:	80 91 60 00 	lds	r24, 0x0060
 2d8:	90 91 61 00 	lds	r25, 0x0061
 2dc:	97 01       	movw	r18, r14
 2de:	28 1b       	sub	r18, r24
 2e0:	39 0b       	sbc	r19, r25
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 2e2:	c9 01       	movw	r24, r18
 2e4:	99 23       	and	r25, r25
 2e6:	24 f4       	brge	.+8      	; 0x2f0 <__stack+0x91>
 2e8:	88 27       	eor	r24, r24
 2ea:	99 27       	eor	r25, r25
 2ec:	82 1b       	sub	r24, r18
 2ee:	93 0b       	sbc	r25, r19
		if (absolute(direita - last_pow_dir) <= 10 || absolute(direita-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
		{
			last_pow_dir = direita;
			asm("WDR");
		}
		if (absolute(esquerda - last_pow_esq) <= 10 || absolute(esquerda-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 2f0:	0b 97       	sbiw	r24, 0x0b	; 11
 2f2:	64 f0       	brlt	.+24     	; 0x30c <__stack+0xad>
 2f4:	97 01       	movw	r18, r14
 2f6:	28 5c       	subi	r18, 0xC8	; 200
 2f8:	31 09       	sbc	r19, r1
	}
}

int16_t absolute(int16_t a)
{
	return (a > 0)?a:-a;
 2fa:	c9 01       	movw	r24, r18
 2fc:	99 23       	and	r25, r25
 2fe:	24 f4       	brge	.+8      	; 0x308 <__stack+0xa9>
 300:	88 27       	eor	r24, r24
 302:	99 27       	eor	r25, r25
 304:	82 1b       	sub	r24, r18
 306:	93 0b       	sbc	r25, r19
		if (absolute(direita - last_pow_dir) <= 10 || absolute(direita-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
		{
			last_pow_dir = direita;
			asm("WDR");
		}
		if (absolute(esquerda - last_pow_esq) <= 10 || absolute(esquerda-200) <= 10) //Se ficou muito tempo no mesmo sinal nao reseta WD, a menos que seja zero
 308:	0b 97       	sbiw	r24, 0x0b	; 11
 30a:	2c f4       	brge	.+10     	; 0x316 <__stack+0xb7>
		{
			last_pow_esq = esquerda;
 30c:	f0 92 61 00 	sts	0x0061, r15
 310:	e0 92 60 00 	sts	0x0060, r14
			asm("WDR");
 314:	a8 95       	wdr
		}
		if (direita >= 0) //Gira direita sentido horario
 316:	dd 23       	and	r29, r29
 318:	3c f0       	brlt	.+14     	; 0x328 <__stack+0xc9>
		{
			OCR1A = (direita >= 255)?255:(direita & 0xFF);
 31a:	cf 3f       	cpi	r28, 0xFF	; 255
 31c:	d1 05       	cpc	r29, r1
 31e:	0c f0       	brlt	.+2      	; 0x322 <__stack+0xc3>
 320:	c1 2f       	mov	r28, r17
 322:	cd bd       	out	0x2d, r28	; 45
			output_low(PORTB, PINB0);
 324:	c0 98       	cbi	0x18, 0	; 24
 326:	07 c0       	rjmp	.+14     	; 0x336 <__stack+0xd7>
		}
		else //Gira direita sentido anti-horario
		{
			OCR1A = (direita <= -255)?0:(direita & 0xFF);
 328:	c2 30       	cpi	r28, 0x02	; 2
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	d8 07       	cpc	r29, r24
 32e:	0c f4       	brge	.+2      	; 0x332 <__stack+0xd3>
 330:	c0 2f       	mov	r28, r16
 332:	cd bd       	out	0x2d, r28	; 45
			output_high(PORTB, PINB0);
 334:	c0 9a       	sbi	0x18, 0	; 24
		}
		if (esquerda >= 0) //Gira esquerda sentido horario
 336:	ff 20       	and	r15, r15
 338:	44 f0       	brlt	.+16     	; 0x34a <__stack+0xeb>
		{
			OCR1B = (esquerda >= 255)?255:(esquerda & 0xFF);
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	e8 16       	cp	r14, r24
 33e:	f1 04       	cpc	r15, r1
 340:	0c f0       	brlt	.+2      	; 0x344 <__stack+0xe5>
 342:	e1 2e       	mov	r14, r17
 344:	ec bc       	out	0x2c, r14	; 44
			output_low(PORTB, PINB2);
 346:	c2 98       	cbi	0x18, 2	; 24
 348:	08 c0       	rjmp	.+16     	; 0x35a <__stack+0xfb>
		}
		else //Gira direita sentido anti-horario
		{
			OCR1B = (esquerda <= -255)?0:(esquerda & 0xFF);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	e8 16       	cp	r14, r24
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	f8 06       	cpc	r15, r24
 352:	0c f4       	brge	.+2      	; 0x356 <__stack+0xf7>
 354:	e0 2e       	mov	r14, r16
 356:	ec bc       	out	0x2c, r14	; 44
			output_high(PORTB, PINB2);
 358:	c2 9a       	sbi	0x18, 2	; 24
		}
		delay_ms(50);
 35a:	82 e3       	ldi	r24, 0x32	; 50
 35c:	fb de       	rcall	.-522    	; 0x154 <_Z8delay_msh>
	}//end while
 35e:	61 cf       	rjmp	.-318    	; 0x222 <main+0x8e>

00000360 <__subsf3>:
 360:	50 58       	subi	r21, 0x80	; 128

00000362 <__addsf3>:
 362:	bb 27       	eor	r27, r27
 364:	aa 27       	eor	r26, r26
 366:	0e d0       	rcall	.+28     	; 0x384 <__addsf3x>
 368:	e5 c0       	rjmp	.+458    	; 0x534 <__fp_round>
 36a:	d6 d0       	rcall	.+428    	; 0x518 <__fp_pscA>
 36c:	30 f0       	brcs	.+12     	; 0x37a <__addsf3+0x18>
 36e:	db d0       	rcall	.+438    	; 0x526 <__fp_pscB>
 370:	20 f0       	brcs	.+8      	; 0x37a <__addsf3+0x18>
 372:	31 f4       	brne	.+12     	; 0x380 <__addsf3+0x1e>
 374:	9f 3f       	cpi	r25, 0xFF	; 255
 376:	11 f4       	brne	.+4      	; 0x37c <__addsf3+0x1a>
 378:	1e f4       	brtc	.+6      	; 0x380 <__addsf3+0x1e>
 37a:	cb c0       	rjmp	.+406    	; 0x512 <__fp_nan>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3+0x1e>
 37e:	e0 95       	com	r30
 380:	e7 fb       	bst	r30, 7
 382:	c1 c0       	rjmp	.+386    	; 0x506 <__fp_inf>

00000384 <__addsf3x>:
 384:	e9 2f       	mov	r30, r25
 386:	e7 d0       	rcall	.+462    	; 0x556 <__fp_split3>
 388:	80 f3       	brcs	.-32     	; 0x36a <__addsf3+0x8>
 38a:	ba 17       	cp	r27, r26
 38c:	62 07       	cpc	r22, r18
 38e:	73 07       	cpc	r23, r19
 390:	84 07       	cpc	r24, r20
 392:	95 07       	cpc	r25, r21
 394:	18 f0       	brcs	.+6      	; 0x39c <__addsf3x+0x18>
 396:	71 f4       	brne	.+28     	; 0x3b4 <__addsf3x+0x30>
 398:	9e f5       	brtc	.+102    	; 0x400 <__addsf3x+0x7c>
 39a:	ff c0       	rjmp	.+510    	; 0x59a <__fp_zero>
 39c:	0e f4       	brtc	.+2      	; 0x3a0 <__addsf3x+0x1c>
 39e:	e0 95       	com	r30
 3a0:	0b 2e       	mov	r0, r27
 3a2:	ba 2f       	mov	r27, r26
 3a4:	a0 2d       	mov	r26, r0
 3a6:	0b 01       	movw	r0, r22
 3a8:	b9 01       	movw	r22, r18
 3aa:	90 01       	movw	r18, r0
 3ac:	0c 01       	movw	r0, r24
 3ae:	ca 01       	movw	r24, r20
 3b0:	a0 01       	movw	r20, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	ff 27       	eor	r31, r31
 3b6:	59 1b       	sub	r21, r25
 3b8:	99 f0       	breq	.+38     	; 0x3e0 <__addsf3x+0x5c>
 3ba:	59 3f       	cpi	r21, 0xF9	; 249
 3bc:	50 f4       	brcc	.+20     	; 0x3d2 <__addsf3x+0x4e>
 3be:	50 3e       	cpi	r21, 0xE0	; 224
 3c0:	68 f1       	brcs	.+90     	; 0x41c <__addsf3x+0x98>
 3c2:	1a 16       	cp	r1, r26
 3c4:	f0 40       	sbci	r31, 0x00	; 0
 3c6:	a2 2f       	mov	r26, r18
 3c8:	23 2f       	mov	r18, r19
 3ca:	34 2f       	mov	r19, r20
 3cc:	44 27       	eor	r20, r20
 3ce:	58 5f       	subi	r21, 0xF8	; 248
 3d0:	f3 cf       	rjmp	.-26     	; 0x3b8 <__addsf3x+0x34>
 3d2:	46 95       	lsr	r20
 3d4:	37 95       	ror	r19
 3d6:	27 95       	ror	r18
 3d8:	a7 95       	ror	r26
 3da:	f0 40       	sbci	r31, 0x00	; 0
 3dc:	53 95       	inc	r21
 3de:	c9 f7       	brne	.-14     	; 0x3d2 <__addsf3x+0x4e>
 3e0:	7e f4       	brtc	.+30     	; 0x400 <__addsf3x+0x7c>
 3e2:	1f 16       	cp	r1, r31
 3e4:	ba 0b       	sbc	r27, r26
 3e6:	62 0b       	sbc	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	ba f0       	brmi	.+46     	; 0x41c <__addsf3x+0x98>
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	a1 f0       	breq	.+40     	; 0x41a <__addsf3x+0x96>
 3f2:	ff 0f       	add	r31, r31
 3f4:	bb 1f       	adc	r27, r27
 3f6:	66 1f       	adc	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	c2 f7       	brpl	.-16     	; 0x3ee <__addsf3x+0x6a>
 3fe:	0e c0       	rjmp	.+28     	; 0x41c <__addsf3x+0x98>
 400:	ba 0f       	add	r27, r26
 402:	62 1f       	adc	r22, r18
 404:	73 1f       	adc	r23, r19
 406:	84 1f       	adc	r24, r20
 408:	48 f4       	brcc	.+18     	; 0x41c <__addsf3x+0x98>
 40a:	87 95       	ror	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b7 95       	ror	r27
 412:	f7 95       	ror	r31
 414:	9e 3f       	cpi	r25, 0xFE	; 254
 416:	08 f0       	brcs	.+2      	; 0x41a <__addsf3x+0x96>
 418:	b3 cf       	rjmp	.-154    	; 0x380 <__addsf3+0x1e>
 41a:	93 95       	inc	r25
 41c:	88 0f       	add	r24, r24
 41e:	08 f0       	brcs	.+2      	; 0x422 <__addsf3x+0x9e>
 420:	99 27       	eor	r25, r25
 422:	ee 0f       	add	r30, r30
 424:	97 95       	ror	r25
 426:	87 95       	ror	r24
 428:	08 95       	ret

0000042a <__fixsfsi>:
 42a:	04 d0       	rcall	.+8      	; 0x434 <__fixunssfsi>
 42c:	68 94       	set
 42e:	b1 11       	cpse	r27, r1
 430:	b5 c0       	rjmp	.+362    	; 0x59c <__fp_szero>
 432:	08 95       	ret

00000434 <__fixunssfsi>:
 434:	98 d0       	rcall	.+304    	; 0x566 <__fp_splitA>
 436:	88 f0       	brcs	.+34     	; 0x45a <__fixunssfsi+0x26>
 438:	9f 57       	subi	r25, 0x7F	; 127
 43a:	90 f0       	brcs	.+36     	; 0x460 <__fixunssfsi+0x2c>
 43c:	b9 2f       	mov	r27, r25
 43e:	99 27       	eor	r25, r25
 440:	b7 51       	subi	r27, 0x17	; 23
 442:	a0 f0       	brcs	.+40     	; 0x46c <__fixunssfsi+0x38>
 444:	d1 f0       	breq	.+52     	; 0x47a <__fixunssfsi+0x46>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	1a f0       	brmi	.+6      	; 0x456 <__fixunssfsi+0x22>
 450:	ba 95       	dec	r27
 452:	c9 f7       	brne	.-14     	; 0x446 <__fixunssfsi+0x12>
 454:	12 c0       	rjmp	.+36     	; 0x47a <__fixunssfsi+0x46>
 456:	b1 30       	cpi	r27, 0x01	; 1
 458:	81 f0       	breq	.+32     	; 0x47a <__fixunssfsi+0x46>
 45a:	9f d0       	rcall	.+318    	; 0x59a <__fp_zero>
 45c:	b1 e0       	ldi	r27, 0x01	; 1
 45e:	08 95       	ret
 460:	9c c0       	rjmp	.+312    	; 0x59a <__fp_zero>
 462:	67 2f       	mov	r22, r23
 464:	78 2f       	mov	r23, r24
 466:	88 27       	eor	r24, r24
 468:	b8 5f       	subi	r27, 0xF8	; 248
 46a:	39 f0       	breq	.+14     	; 0x47a <__fixunssfsi+0x46>
 46c:	b9 3f       	cpi	r27, 0xF9	; 249
 46e:	cc f3       	brlt	.-14     	; 0x462 <__fixunssfsi+0x2e>
 470:	86 95       	lsr	r24
 472:	77 95       	ror	r23
 474:	67 95       	ror	r22
 476:	b3 95       	inc	r27
 478:	d9 f7       	brne	.-10     	; 0x470 <__fixunssfsi+0x3c>
 47a:	3e f4       	brtc	.+14     	; 0x48a <__fixunssfsi+0x56>
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <__floatunsisf>:
 48c:	e8 94       	clt
 48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__floatsisf+0x12>

00000490 <__floatsisf>:
 490:	97 fb       	bst	r25, 7
 492:	3e f4       	brtc	.+14     	; 0x4a2 <__floatsisf+0x12>
 494:	90 95       	com	r25
 496:	80 95       	com	r24
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	99 23       	and	r25, r25
 4a4:	a9 f0       	breq	.+42     	; 0x4d0 <__floatsisf+0x40>
 4a6:	f9 2f       	mov	r31, r25
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	bb 27       	eor	r27, r27
 4ac:	93 95       	inc	r25
 4ae:	f6 95       	lsr	r31
 4b0:	87 95       	ror	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b7 95       	ror	r27
 4b8:	f1 11       	cpse	r31, r1
 4ba:	f8 cf       	rjmp	.-16     	; 0x4ac <__floatsisf+0x1c>
 4bc:	fa f4       	brpl	.+62     	; 0x4fc <__floatsisf+0x6c>
 4be:	bb 0f       	add	r27, r27
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__floatsisf+0x36>
 4c2:	60 ff       	sbrs	r22, 0
 4c4:	1b c0       	rjmp	.+54     	; 0x4fc <__floatsisf+0x6c>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	16 c0       	rjmp	.+44     	; 0x4fc <__floatsisf+0x6c>
 4d0:	88 23       	and	r24, r24
 4d2:	11 f0       	breq	.+4      	; 0x4d8 <__floatsisf+0x48>
 4d4:	96 e9       	ldi	r25, 0x96	; 150
 4d6:	11 c0       	rjmp	.+34     	; 0x4fa <__floatsisf+0x6a>
 4d8:	77 23       	and	r23, r23
 4da:	21 f0       	breq	.+8      	; 0x4e4 <__floatsisf+0x54>
 4dc:	9e e8       	ldi	r25, 0x8E	; 142
 4de:	87 2f       	mov	r24, r23
 4e0:	76 2f       	mov	r23, r22
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__floatsisf+0x5e>
 4e4:	66 23       	and	r22, r22
 4e6:	71 f0       	breq	.+28     	; 0x504 <__floatsisf+0x74>
 4e8:	96 e8       	ldi	r25, 0x86	; 134
 4ea:	86 2f       	mov	r24, r22
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	2a f0       	brmi	.+10     	; 0x4fc <__floatsisf+0x6c>
 4f2:	9a 95       	dec	r25
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	da f7       	brpl	.-10     	; 0x4f2 <__floatsisf+0x62>
 4fc:	88 0f       	add	r24, r24
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <__fp_inf>:
 506:	97 f9       	bld	r25, 7
 508:	9f 67       	ori	r25, 0x7F	; 127
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	08 95       	ret

00000512 <__fp_nan>:
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	08 95       	ret

00000518 <__fp_pscA>:
 518:	00 24       	eor	r0, r0
 51a:	0a 94       	dec	r0
 51c:	16 16       	cp	r1, r22
 51e:	17 06       	cpc	r1, r23
 520:	18 06       	cpc	r1, r24
 522:	09 06       	cpc	r0, r25
 524:	08 95       	ret

00000526 <__fp_pscB>:
 526:	00 24       	eor	r0, r0
 528:	0a 94       	dec	r0
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	05 06       	cpc	r0, r21
 532:	08 95       	ret

00000534 <__fp_round>:
 534:	09 2e       	mov	r0, r25
 536:	03 94       	inc	r0
 538:	00 0c       	add	r0, r0
 53a:	11 f4       	brne	.+4      	; 0x540 <__fp_round+0xc>
 53c:	88 23       	and	r24, r24
 53e:	52 f0       	brmi	.+20     	; 0x554 <__fp_round+0x20>
 540:	bb 0f       	add	r27, r27
 542:	40 f4       	brcc	.+16     	; 0x554 <__fp_round+0x20>
 544:	bf 2b       	or	r27, r31
 546:	11 f4       	brne	.+4      	; 0x54c <__fp_round+0x18>
 548:	60 ff       	sbrs	r22, 0
 54a:	04 c0       	rjmp	.+8      	; 0x554 <__fp_round+0x20>
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__fp_split3>:
 556:	57 fd       	sbrc	r21, 7
 558:	90 58       	subi	r25, 0x80	; 128
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	59 f0       	breq	.+22     	; 0x576 <__fp_splitA+0x10>
 560:	5f 3f       	cpi	r21, 0xFF	; 255
 562:	71 f0       	breq	.+28     	; 0x580 <__fp_splitA+0x1a>
 564:	47 95       	ror	r20

00000566 <__fp_splitA>:
 566:	88 0f       	add	r24, r24
 568:	97 fb       	bst	r25, 7
 56a:	99 1f       	adc	r25, r25
 56c:	61 f0       	breq	.+24     	; 0x586 <__fp_splitA+0x20>
 56e:	9f 3f       	cpi	r25, 0xFF	; 255
 570:	79 f0       	breq	.+30     	; 0x590 <__fp_splitA+0x2a>
 572:	87 95       	ror	r24
 574:	08 95       	ret
 576:	12 16       	cp	r1, r18
 578:	13 06       	cpc	r1, r19
 57a:	14 06       	cpc	r1, r20
 57c:	55 1f       	adc	r21, r21
 57e:	f2 cf       	rjmp	.-28     	; 0x564 <__fp_split3+0xe>
 580:	46 95       	lsr	r20
 582:	f1 df       	rcall	.-30     	; 0x566 <__fp_splitA>
 584:	08 c0       	rjmp	.+16     	; 0x596 <__fp_splitA+0x30>
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	99 1f       	adc	r25, r25
 58e:	f1 cf       	rjmp	.-30     	; 0x572 <__fp_splitA+0xc>
 590:	86 95       	lsr	r24
 592:	71 05       	cpc	r23, r1
 594:	61 05       	cpc	r22, r1
 596:	08 94       	sec
 598:	08 95       	ret

0000059a <__fp_zero>:
 59a:	e8 94       	clt

0000059c <__fp_szero>:
 59c:	bb 27       	eor	r27, r27
 59e:	66 27       	eor	r22, r22
 5a0:	77 27       	eor	r23, r23
 5a2:	cb 01       	movw	r24, r22
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <__mulsf3>:
 5a8:	0a d0       	rcall	.+20     	; 0x5be <__mulsf3x>
 5aa:	c4 cf       	rjmp	.-120    	; 0x534 <__fp_round>
 5ac:	b5 df       	rcall	.-150    	; 0x518 <__fp_pscA>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <__mulsf3+0x12>
 5b0:	ba df       	rcall	.-140    	; 0x526 <__fp_pscB>
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <__mulsf3+0x12>
 5b4:	95 23       	and	r25, r21
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__mulsf3+0x12>
 5b8:	a6 cf       	rjmp	.-180    	; 0x506 <__fp_inf>
 5ba:	ab cf       	rjmp	.-170    	; 0x512 <__fp_nan>
 5bc:	ef cf       	rjmp	.-34     	; 0x59c <__fp_szero>

000005be <__mulsf3x>:
 5be:	cb df       	rcall	.-106    	; 0x556 <__fp_split3>
 5c0:	a8 f3       	brcs	.-22     	; 0x5ac <__mulsf3+0x4>

000005c2 <__mulsf3_pse>:
 5c2:	99 23       	and	r25, r25
 5c4:	d9 f3       	breq	.-10     	; 0x5bc <__mulsf3+0x14>
 5c6:	55 23       	and	r21, r21
 5c8:	c9 f3       	breq	.-14     	; 0x5bc <__mulsf3+0x14>
 5ca:	95 0f       	add	r25, r21
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	55 1f       	adc	r21, r21
 5d0:	aa 27       	eor	r26, r26
 5d2:	ee 27       	eor	r30, r30
 5d4:	ff 27       	eor	r31, r31
 5d6:	bb 27       	eor	r27, r27
 5d8:	00 24       	eor	r0, r0
 5da:	08 94       	sec
 5dc:	67 95       	ror	r22
 5de:	20 f4       	brcc	.+8      	; 0x5e8 <__mulsf3_pse+0x26>
 5e0:	e2 0f       	add	r30, r18
 5e2:	f3 1f       	adc	r31, r19
 5e4:	b4 1f       	adc	r27, r20
 5e6:	0a 1e       	adc	r0, r26
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	44 1f       	adc	r20, r20
 5ee:	aa 1f       	adc	r26, r26
 5f0:	66 95       	lsr	r22
 5f2:	a9 f7       	brne	.-22     	; 0x5de <__mulsf3_pse+0x1c>
 5f4:	77 95       	ror	r23
 5f6:	30 f4       	brcc	.+12     	; 0x604 <__mulsf3_pse+0x42>
 5f8:	f3 0f       	add	r31, r19
 5fa:	b4 1f       	adc	r27, r20
 5fc:	0a 1e       	adc	r0, r26
 5fe:	12 1e       	adc	r1, r18
 600:	08 f4       	brcc	.+2      	; 0x604 <__mulsf3_pse+0x42>
 602:	63 95       	inc	r22
 604:	33 0f       	add	r19, r19
 606:	44 1f       	adc	r20, r20
 608:	aa 1f       	adc	r26, r26
 60a:	22 1f       	adc	r18, r18
 60c:	76 95       	lsr	r23
 60e:	99 f7       	brne	.-26     	; 0x5f6 <__mulsf3_pse+0x34>
 610:	87 95       	ror	r24
 612:	20 f4       	brcc	.+8      	; 0x61c <__mulsf3_pse+0x5a>
 614:	b4 0f       	add	r27, r20
 616:	0a 1e       	adc	r0, r26
 618:	12 1e       	adc	r1, r18
 61a:	63 1f       	adc	r22, r19
 61c:	44 0f       	add	r20, r20
 61e:	aa 1f       	adc	r26, r26
 620:	22 1f       	adc	r18, r18
 622:	33 1f       	adc	r19, r19
 624:	86 95       	lsr	r24
 626:	a9 f7       	brne	.-22     	; 0x612 <__mulsf3_pse+0x50>
 628:	86 2f       	mov	r24, r22
 62a:	71 2d       	mov	r23, r1
 62c:	60 2d       	mov	r22, r0
 62e:	11 24       	eor	r1, r1
 630:	9f 57       	subi	r25, 0x7F	; 127
 632:	50 40       	sbci	r21, 0x00	; 0
 634:	8a f0       	brmi	.+34     	; 0x658 <__mulsf3_pse+0x96>
 636:	e1 f0       	breq	.+56     	; 0x670 <__mulsf3_pse+0xae>
 638:	88 23       	and	r24, r24
 63a:	4a f0       	brmi	.+18     	; 0x64e <__mulsf3_pse+0x8c>
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	bb 1f       	adc	r27, r27
 642:	66 1f       	adc	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	a9 f7       	brne	.-22     	; 0x638 <__mulsf3_pse+0x76>
 64e:	9e 3f       	cpi	r25, 0xFE	; 254
 650:	51 05       	cpc	r21, r1
 652:	70 f0       	brcs	.+28     	; 0x670 <__mulsf3_pse+0xae>
 654:	58 cf       	rjmp	.-336    	; 0x506 <__fp_inf>
 656:	a2 cf       	rjmp	.-188    	; 0x59c <__fp_szero>
 658:	5f 3f       	cpi	r21, 0xFF	; 255
 65a:	ec f3       	brlt	.-6      	; 0x656 <__mulsf3_pse+0x94>
 65c:	98 3e       	cpi	r25, 0xE8	; 232
 65e:	dc f3       	brlt	.-10     	; 0x656 <__mulsf3_pse+0x94>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f7 95       	ror	r31
 66a:	e7 95       	ror	r30
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c1 f7       	brne	.-16     	; 0x660 <__mulsf3_pse+0x9e>
 670:	fe 2b       	or	r31, r30
 672:	88 0f       	add	r24, r24
 674:	91 1d       	adc	r25, r1
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
