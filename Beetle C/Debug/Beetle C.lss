
Beetle C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000568  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000005dc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e7  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012b  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f4  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ba  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	3b c0       	rjmp	.+118    	; 0x92 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	78 d0       	rcall	.+240    	; 0x134 <main>
  44:	8f c2       	rjmp	.+1310   	; 0x564 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:
volatile uint8_t time_int_1 = 0;
volatile uint8_t time_int_1_before = 0;
volatile uint8_t time_int_0 = 0;
volatile uint8_t time_int_0_before = 0;

ISR(INT0_vect){
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	8f 93       	push	r24
  56:	9f 93       	push	r25
	if (PINB & (1 << PINB6))
  58:	b6 9b       	sbis	0x16, 6	; 22
  5a:	04 c0       	rjmp	.+8      	; 0x64 <__vector_1+0x1c>
	{
		time_int_0_before = TCNT0L;
  5c:	82 b7       	in	r24, 0x32	; 50
  5e:	80 93 60 00 	sts	0x0060, r24
  62:	0f c0       	rjmp	.+30     	; 0x82 <__vector_1+0x3a>
	}
	else
	{
		if ((TCNT0L - time_int_0_before) > 0) time_int_0 = TCNT0L - time_int_0_before;
  64:	82 b7       	in	r24, 0x32	; 50
  66:	20 91 60 00 	lds	r18, 0x0060
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	82 1b       	sub	r24, r18
  6e:	91 09       	sbc	r25, r1
  70:	18 16       	cp	r1, r24
  72:	19 06       	cpc	r1, r25
  74:	34 f4       	brge	.+12     	; 0x82 <__vector_1+0x3a>
  76:	82 b7       	in	r24, 0x32	; 50
  78:	90 91 60 00 	lds	r25, 0x0060
  7c:	89 1b       	sub	r24, r25
  7e:	80 93 61 00 	sts	0x0061, r24
	}
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <__vector_13>:

ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	if (PINA & (1 << PINA2))	
  a2:	ca 9b       	sbis	0x19, 2	; 25
  a4:	04 c0       	rjmp	.+8      	; 0xae <__vector_13+0x1c>
	{
		time_int_1_before = TCNT0L;
  a6:	82 b7       	in	r24, 0x32	; 50
  a8:	80 93 62 00 	sts	0x0062, r24
  ac:	0f c0       	rjmp	.+30     	; 0xcc <__vector_13+0x3a>
	}
	else
	{
		if ((TCNT0L - time_int_1_before) > 0) time_int_1 = TCNT0L - time_int_1_before;
  ae:	82 b7       	in	r24, 0x32	; 50
  b0:	20 91 62 00 	lds	r18, 0x0062
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	82 1b       	sub	r24, r18
  b8:	91 09       	sbc	r25, r1
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	34 f4       	brge	.+12     	; 0xcc <__vector_13+0x3a>
  c0:	82 b7       	in	r24, 0x32	; 50
  c2:	90 91 62 00 	lds	r25, 0x0062
  c6:	89 1b       	sub	r24, r25
  c8:	80 93 63 00 	sts	0x0063, r24
	}
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_Z16configura_portasv>:

//configura os inputs e outputs
void configura_portas (){
	//define as portas como saída
	set_output(DDRB, PB0);
  dc:	b8 9a       	sbi	0x17, 0	; 23
	set_output(DDRB, PB1);
  de:	b9 9a       	sbi	0x17, 1	; 23
	set_output(DDRB, PB2);
  e0:	ba 9a       	sbi	0x17, 2	; 23
	set_output(DDRB, PB3);
  e2:	bb 9a       	sbi	0x17, 3	; 23
	//define as portas como entrada
	set_input(DDRB, PB4);
  e4:	bc 98       	cbi	0x17, 4	; 23
	set_input(DDRB, PB5);
  e6:	bd 98       	cbi	0x17, 5	; 23
	set_input(DDRB, PB6);
  e8:	be 98       	cbi	0x17, 6	; 23
	set_input(DDRB, PB7);
  ea:	bf 98       	cbi	0x17, 7	; 23
	set_input(DDRA, PA0);
  ec:	d0 98       	cbi	0x1a, 0	; 26
	set_input(DDRA, PA1);
  ee:	d1 98       	cbi	0x1a, 1	; 26
	set_input(DDRA, PA2);
  f0:	d2 98       	cbi	0x1a, 2	; 26
  f2:	08 95       	ret

000000f4 <_Z8delay_msh>:
}

// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <_Z8delay_msh+0x6>
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
  fe:	88 23       	and	r24, r24
 100:	a1 f0       	breq	.+40     	; 0x12a <_Z8delay_msh+0x36>
		for (i=0; i != delay_count; i++);
 102:	1a 82       	std	Y+2, r1	; 0x02
 104:	19 82       	std	Y+1, r1	; 0x01
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	3a 81       	ldd	r19, Y+2	; 0x02
 10a:	28 3e       	cpi	r18, 0xE8	; 232
 10c:	33 40       	sbci	r19, 0x03	; 3
 10e:	59 f0       	breq	.+22     	; 0x126 <_Z8delay_msh+0x32>
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	3a 81       	ldd	r19, Y+2	; 0x02
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	3a 83       	std	Y+2, r19	; 0x02
 11a:	29 83       	std	Y+1, r18	; 0x01
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	3a 81       	ldd	r19, Y+2	; 0x02
 120:	28 3e       	cpi	r18, 0xE8	; 232
 122:	33 40       	sbci	r19, 0x03	; 3
 124:	a9 f7       	brne	.-22     	; 0x110 <_Z8delay_msh+0x1c>
		ms--;
 126:	81 50       	subi	r24, 0x01	; 1
// this is just a program that 'kills time' in a calibrated method
void delay_ms(uint8_t ms) {
	uint16_t delay_count = 1000;
	volatile uint16_t i;
	
	while (ms != 0) {
 128:	61 f7       	brne	.-40     	; 0x102 <_Z8delay_msh+0xe>
		for (i=0; i != delay_count; i++);
		ms--;
	}
}
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:

//INT0 PB6     INT1 PA2
int main(){
	configura_portas();
 134:	d3 df       	rcall	.-90     	; 0xdc <_Z16configura_portasv>
	MCUCR |= (1 << ISC00) | (0 << ISC01); //MCUCR = 0b00000011
 136:	85 b7       	in	r24, 0x35	; 53
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0) | (1 << INT1); //GISMK = 0b11000000
 13c:	8b b7       	in	r24, 0x3b	; 59
 13e:	80 6c       	ori	r24, 0xC0	; 192
 140:	8b bf       	out	0x3b, r24	; 59
	delay_ms(100);
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	d7 df       	rcall	.-82     	; 0xf4 <_Z8delay_msh>

	TCCR0B |= (1 << CS00) | (1 << CS01); //Config timer
 146:	83 b7       	in	r24, 0x33	; 51
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0) | (1 << PWM1A) | (1 << PWM1B);
 14c:	80 b7       	in	r24, 0x30	; 48
 14e:	83 6a       	ori	r24, 0xA3	; 163
 150:	80 bf       	out	0x30, r24	; 48
	TCCR1B |= (1 << CS10);
 152:	8f b5       	in	r24, 0x2f	; 47
 154:	81 60       	ori	r24, 0x01	; 1
 156:	8f bd       	out	0x2f, r24	; 47
	TCCR1D |= (1 << WGM10);
 158:	86 b5       	in	r24, 0x26	; 38
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	86 bd       	out	0x26, r24	; 38
	OCR1C = 255; //set top
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8b bd       	out	0x2b, r24	; 43
	//OCR1A = 20;
	//OCR1B = 128;
	//while (1);
	sei(); //habilita interrupçoes
 162:	78 94       	sei
			output_low(PORTB, PINB2);
		}
		else if (direita < -20)
		{
			//TCCR1A |= (1 << COM1A1) | (1 << COM1A0); //Set on match
			OCR1A = (direita <= -255)?0:(direita + 255);
 164:	10 e0       	ldi	r17, 0x00	; 0
		direita = pwm2 + pwm1;
		esquerda = pwm2 - pwm1;
		if (direita > 20)
		{
			//TCCR1A |= (1 << COM1A1) | (0 << COM1A0); //Clear on match
			OCR1A = (direita >= 255)?255:direita;
 166:	df ef       	ldi	r29, 0xFF	; 255
 168:	c0 e0       	ldi	r28, 0x00	; 0
	int16_t direita, esquerda;
	while(1){
		//OCR1A = ((time_int_0 - 125) * 2.048);
		//OCR1B = ((time_int_1 - 125) * 2.048);
		//continue;
		pwm1 = (((time_int_0 - 125) * 2.048) - 128)*2; //((time_int_0 - 125) * 2.56 - 127) * 2;
 16a:	60 91 61 00 	lds	r22, 0x0061
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	6d 57       	subi	r22, 0x7D	; 125
 172:	71 09       	sbc	r23, r1
 174:	88 27       	eor	r24, r24
 176:	77 fd       	sbrc	r23, 7
 178:	80 95       	com	r24
 17a:	98 2f       	mov	r25, r24
 17c:	fc d0       	rcall	.+504    	; 0x376 <__floatsisf>
 17e:	2f e6       	ldi	r18, 0x6F	; 111
 180:	32 e1       	ldi	r19, 0x12	; 18
 182:	43 e0       	ldi	r20, 0x03	; 3
 184:	50 e4       	ldi	r21, 0x40	; 64
 186:	83 d1       	rcall	.+774    	; 0x48e <__mulsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	53 e4       	ldi	r21, 0x43	; 67
 190:	5a d0       	rcall	.+180    	; 0x246 <__subsf3>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	58 d0       	rcall	.+176    	; 0x248 <__addsf3>
 198:	bb d0       	rcall	.+374    	; 0x310 <__fixsfsi>
 19a:	6b 01       	movw	r12, r22
 19c:	7c 01       	movw	r14, r24
		pwm2 = (((time_int_1 - 125) * 2.048) - 128)*2; //((time_int_1 - 125) * 2.56 - 127) * 2;
 19e:	60 91 63 00 	lds	r22, 0x0063
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	6d 57       	subi	r22, 0x7D	; 125
 1a6:	71 09       	sbc	r23, r1
 1a8:	88 27       	eor	r24, r24
 1aa:	77 fd       	sbrc	r23, 7
 1ac:	80 95       	com	r24
 1ae:	98 2f       	mov	r25, r24
 1b0:	e2 d0       	rcall	.+452    	; 0x376 <__floatsisf>
 1b2:	2f e6       	ldi	r18, 0x6F	; 111
 1b4:	32 e1       	ldi	r19, 0x12	; 18
 1b6:	43 e0       	ldi	r20, 0x03	; 3
 1b8:	50 e4       	ldi	r21, 0x40	; 64
 1ba:	69 d1       	rcall	.+722    	; 0x48e <__mulsf3>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	53 e4       	ldi	r21, 0x43	; 67
 1c4:	40 d0       	rcall	.+128    	; 0x246 <__subsf3>
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	3e d0       	rcall	.+124    	; 0x248 <__addsf3>
 1cc:	a1 d0       	rcall	.+322    	; 0x310 <__fixsfsi>
		direita = pwm2 + pwm1;
 1ce:	9b 01       	movw	r18, r22
 1d0:	2c 0d       	add	r18, r12
 1d2:	3d 1d       	adc	r19, r13
		esquerda = pwm2 - pwm1;
 1d4:	6c 19       	sub	r22, r12
 1d6:	7d 09       	sbc	r23, r13
		if (direita > 20)
 1d8:	25 31       	cpi	r18, 0x15	; 21
 1da:	31 05       	cpc	r19, r1
 1dc:	44 f0       	brlt	.+16     	; 0x1ee <main+0xba>
		{
			//TCCR1A |= (1 << COM1A1) | (0 << COM1A0); //Clear on match
			OCR1A = (direita >= 255)?255:direita;
 1de:	2f 3f       	cpi	r18, 0xFF	; 255
 1e0:	31 05       	cpc	r19, r1
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <main+0xb4>
 1e4:	0c f0       	brlt	.+2      	; 0x1e8 <main+0xb4>
 1e6:	2d 2f       	mov	r18, r29
 1e8:	2d bd       	out	0x2d, r18	; 45
			output_low(PORTB, PINB2);
 1ea:	c2 98       	cbi	0x18, 2	; 24
 1ec:	10 c0       	rjmp	.+32     	; 0x20e <main+0xda>
		}
		else if (direita < -20)
 1ee:	2c 3e       	cpi	r18, 0xEC	; 236
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	38 07       	cpc	r19, r24
 1f4:	54 f4       	brge	.+20     	; 0x20a <main+0xd6>
		{
			//TCCR1A |= (1 << COM1A1) | (1 << COM1A0); //Set on match
			OCR1A = (direita <= -255)?0:(direita + 255);
 1f6:	22 30       	cpi	r18, 0x02	; 2
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	38 07       	cpc	r19, r24
 1fc:	14 f0       	brlt	.+4      	; 0x202 <main+0xce>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	01 c0       	rjmp	.+2      	; 0x204 <main+0xd0>
 202:	21 2f       	mov	r18, r17
 204:	2d bd       	out	0x2d, r18	; 45
			output_high(PORTB, PINB2);
 206:	c2 9a       	sbi	0x18, 2	; 24
 208:	02 c0       	rjmp	.+4      	; 0x20e <main+0xda>
		}
		else
		{
			OCR1A = 0;
 20a:	1d bc       	out	0x2d, r1	; 45
			output_low(PORTB, PINB2);
 20c:	c2 98       	cbi	0x18, 2	; 24
		}
		if (esquerda > 20)
 20e:	65 31       	cpi	r22, 0x15	; 21
 210:	71 05       	cpc	r23, r1
 212:	44 f0       	brlt	.+16     	; 0x224 <main+0xf0>
		{ 
			//TCCR1A |= (1 << COM1B1) | (0 << COM1B0); //Clear on match
			OCR1B = (esquerda >= 255)?255:esquerda;
 214:	6f 3f       	cpi	r22, 0xFF	; 255
 216:	71 05       	cpc	r23, r1
 218:	11 f0       	breq	.+4      	; 0x21e <main+0xea>
 21a:	0c f0       	brlt	.+2      	; 0x21e <main+0xea>
 21c:	6d 2f       	mov	r22, r29
 21e:	6c bd       	out	0x2c, r22	; 44
			output_low(PORTB, PINB0);
 220:	c0 98       	cbi	0x18, 0	; 24
 222:	a3 cf       	rjmp	.-186    	; 0x16a <main+0x36>
		}
		else if (esquerda < -20)
 224:	6c 3e       	cpi	r22, 0xEC	; 236
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	78 07       	cpc	r23, r24
 22a:	54 f4       	brge	.+20     	; 0x240 <main+0x10c>
		{
			//TCCR1A |= (1 << COM1B1) | (1 << COM1B0); //Set on match
			OCR1B = (esquerda <= -255)?0:(esquerda + 255);
 22c:	62 30       	cpi	r22, 0x02	; 2
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	78 07       	cpc	r23, r24
 232:	14 f0       	brlt	.+4      	; 0x238 <main+0x104>
 234:	61 50       	subi	r22, 0x01	; 1
 236:	01 c0       	rjmp	.+2      	; 0x23a <main+0x106>
 238:	61 2f       	mov	r22, r17
 23a:	6c bd       	out	0x2c, r22	; 44
			output_high(PORTB, PINB0);
 23c:	c0 9a       	sbi	0x18, 0	; 24
 23e:	95 cf       	rjmp	.-214    	; 0x16a <main+0x36>
		}
		else
		{
			OCR1B = 0;
 240:	1c bc       	out	0x2c, r1	; 44
			output_high(PORTB, PINB0);
 242:	c0 9a       	sbi	0x18, 0	; 24
 244:	92 cf       	rjmp	.-220    	; 0x16a <main+0x36>

00000246 <__subsf3>:
 246:	50 58       	subi	r21, 0x80	; 128

00000248 <__addsf3>:
 248:	bb 27       	eor	r27, r27
 24a:	aa 27       	eor	r26, r26
 24c:	0e d0       	rcall	.+28     	; 0x26a <__addsf3x>
 24e:	e5 c0       	rjmp	.+458    	; 0x41a <__fp_round>
 250:	d6 d0       	rcall	.+428    	; 0x3fe <__fp_pscA>
 252:	30 f0       	brcs	.+12     	; 0x260 <__stack+0x1>
 254:	db d0       	rcall	.+438    	; 0x40c <__fp_pscB>
 256:	20 f0       	brcs	.+8      	; 0x260 <__stack+0x1>
 258:	31 f4       	brne	.+12     	; 0x266 <__stack+0x7>
 25a:	9f 3f       	cpi	r25, 0xFF	; 255
 25c:	11 f4       	brne	.+4      	; 0x262 <__stack+0x3>
 25e:	1e f4       	brtc	.+6      	; 0x266 <__stack+0x7>
 260:	cb c0       	rjmp	.+406    	; 0x3f8 <__fp_nan>
 262:	0e f4       	brtc	.+2      	; 0x266 <__stack+0x7>
 264:	e0 95       	com	r30
 266:	e7 fb       	bst	r30, 7
 268:	c1 c0       	rjmp	.+386    	; 0x3ec <__fp_inf>

0000026a <__addsf3x>:
 26a:	e9 2f       	mov	r30, r25
 26c:	e7 d0       	rcall	.+462    	; 0x43c <__fp_split3>
 26e:	80 f3       	brcs	.-32     	; 0x250 <__addsf3+0x8>
 270:	ba 17       	cp	r27, r26
 272:	62 07       	cpc	r22, r18
 274:	73 07       	cpc	r23, r19
 276:	84 07       	cpc	r24, r20
 278:	95 07       	cpc	r25, r21
 27a:	18 f0       	brcs	.+6      	; 0x282 <__addsf3x+0x18>
 27c:	71 f4       	brne	.+28     	; 0x29a <__addsf3x+0x30>
 27e:	9e f5       	brtc	.+102    	; 0x2e6 <__addsf3x+0x7c>
 280:	ff c0       	rjmp	.+510    	; 0x480 <__fp_zero>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3x+0x1c>
 284:	e0 95       	com	r30
 286:	0b 2e       	mov	r0, r27
 288:	ba 2f       	mov	r27, r26
 28a:	a0 2d       	mov	r26, r0
 28c:	0b 01       	movw	r0, r22
 28e:	b9 01       	movw	r22, r18
 290:	90 01       	movw	r18, r0
 292:	0c 01       	movw	r0, r24
 294:	ca 01       	movw	r24, r20
 296:	a0 01       	movw	r20, r0
 298:	11 24       	eor	r1, r1
 29a:	ff 27       	eor	r31, r31
 29c:	59 1b       	sub	r21, r25
 29e:	99 f0       	breq	.+38     	; 0x2c6 <__addsf3x+0x5c>
 2a0:	59 3f       	cpi	r21, 0xF9	; 249
 2a2:	50 f4       	brcc	.+20     	; 0x2b8 <__addsf3x+0x4e>
 2a4:	50 3e       	cpi	r21, 0xE0	; 224
 2a6:	68 f1       	brcs	.+90     	; 0x302 <__addsf3x+0x98>
 2a8:	1a 16       	cp	r1, r26
 2aa:	f0 40       	sbci	r31, 0x00	; 0
 2ac:	a2 2f       	mov	r26, r18
 2ae:	23 2f       	mov	r18, r19
 2b0:	34 2f       	mov	r19, r20
 2b2:	44 27       	eor	r20, r20
 2b4:	58 5f       	subi	r21, 0xF8	; 248
 2b6:	f3 cf       	rjmp	.-26     	; 0x29e <__addsf3x+0x34>
 2b8:	46 95       	lsr	r20
 2ba:	37 95       	ror	r19
 2bc:	27 95       	ror	r18
 2be:	a7 95       	ror	r26
 2c0:	f0 40       	sbci	r31, 0x00	; 0
 2c2:	53 95       	inc	r21
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <__addsf3x+0x4e>
 2c6:	7e f4       	brtc	.+30     	; 0x2e6 <__addsf3x+0x7c>
 2c8:	1f 16       	cp	r1, r31
 2ca:	ba 0b       	sbc	r27, r26
 2cc:	62 0b       	sbc	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	84 0b       	sbc	r24, r20
 2d2:	ba f0       	brmi	.+46     	; 0x302 <__addsf3x+0x98>
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	a1 f0       	breq	.+40     	; 0x300 <__addsf3x+0x96>
 2d8:	ff 0f       	add	r31, r31
 2da:	bb 1f       	adc	r27, r27
 2dc:	66 1f       	adc	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	c2 f7       	brpl	.-16     	; 0x2d4 <__addsf3x+0x6a>
 2e4:	0e c0       	rjmp	.+28     	; 0x302 <__addsf3x+0x98>
 2e6:	ba 0f       	add	r27, r26
 2e8:	62 1f       	adc	r22, r18
 2ea:	73 1f       	adc	r23, r19
 2ec:	84 1f       	adc	r24, r20
 2ee:	48 f4       	brcc	.+18     	; 0x302 <__addsf3x+0x98>
 2f0:	87 95       	ror	r24
 2f2:	77 95       	ror	r23
 2f4:	67 95       	ror	r22
 2f6:	b7 95       	ror	r27
 2f8:	f7 95       	ror	r31
 2fa:	9e 3f       	cpi	r25, 0xFE	; 254
 2fc:	08 f0       	brcs	.+2      	; 0x300 <__addsf3x+0x96>
 2fe:	b3 cf       	rjmp	.-154    	; 0x266 <__stack+0x7>
 300:	93 95       	inc	r25
 302:	88 0f       	add	r24, r24
 304:	08 f0       	brcs	.+2      	; 0x308 <__addsf3x+0x9e>
 306:	99 27       	eor	r25, r25
 308:	ee 0f       	add	r30, r30
 30a:	97 95       	ror	r25
 30c:	87 95       	ror	r24
 30e:	08 95       	ret

00000310 <__fixsfsi>:
 310:	04 d0       	rcall	.+8      	; 0x31a <__fixunssfsi>
 312:	68 94       	set
 314:	b1 11       	cpse	r27, r1
 316:	b5 c0       	rjmp	.+362    	; 0x482 <__fp_szero>
 318:	08 95       	ret

0000031a <__fixunssfsi>:
 31a:	98 d0       	rcall	.+304    	; 0x44c <__fp_splitA>
 31c:	88 f0       	brcs	.+34     	; 0x340 <__fixunssfsi+0x26>
 31e:	9f 57       	subi	r25, 0x7F	; 127
 320:	90 f0       	brcs	.+36     	; 0x346 <__fixunssfsi+0x2c>
 322:	b9 2f       	mov	r27, r25
 324:	99 27       	eor	r25, r25
 326:	b7 51       	subi	r27, 0x17	; 23
 328:	a0 f0       	brcs	.+40     	; 0x352 <__fixunssfsi+0x38>
 32a:	d1 f0       	breq	.+52     	; 0x360 <__fixunssfsi+0x46>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	1a f0       	brmi	.+6      	; 0x33c <__fixunssfsi+0x22>
 336:	ba 95       	dec	r27
 338:	c9 f7       	brne	.-14     	; 0x32c <__fixunssfsi+0x12>
 33a:	12 c0       	rjmp	.+36     	; 0x360 <__fixunssfsi+0x46>
 33c:	b1 30       	cpi	r27, 0x01	; 1
 33e:	81 f0       	breq	.+32     	; 0x360 <__fixunssfsi+0x46>
 340:	9f d0       	rcall	.+318    	; 0x480 <__fp_zero>
 342:	b1 e0       	ldi	r27, 0x01	; 1
 344:	08 95       	ret
 346:	9c c0       	rjmp	.+312    	; 0x480 <__fp_zero>
 348:	67 2f       	mov	r22, r23
 34a:	78 2f       	mov	r23, r24
 34c:	88 27       	eor	r24, r24
 34e:	b8 5f       	subi	r27, 0xF8	; 248
 350:	39 f0       	breq	.+14     	; 0x360 <__fixunssfsi+0x46>
 352:	b9 3f       	cpi	r27, 0xF9	; 249
 354:	cc f3       	brlt	.-14     	; 0x348 <__fixunssfsi+0x2e>
 356:	86 95       	lsr	r24
 358:	77 95       	ror	r23
 35a:	67 95       	ror	r22
 35c:	b3 95       	inc	r27
 35e:	d9 f7       	brne	.-10     	; 0x356 <__fixunssfsi+0x3c>
 360:	3e f4       	brtc	.+14     	; 0x370 <__fixunssfsi+0x56>
 362:	90 95       	com	r25
 364:	80 95       	com	r24
 366:	70 95       	com	r23
 368:	61 95       	neg	r22
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__floatunsisf>:
 372:	e8 94       	clt
 374:	09 c0       	rjmp	.+18     	; 0x388 <__floatsisf+0x12>

00000376 <__floatsisf>:
 376:	97 fb       	bst	r25, 7
 378:	3e f4       	brtc	.+14     	; 0x388 <__floatsisf+0x12>
 37a:	90 95       	com	r25
 37c:	80 95       	com	r24
 37e:	70 95       	com	r23
 380:	61 95       	neg	r22
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	99 23       	and	r25, r25
 38a:	a9 f0       	breq	.+42     	; 0x3b6 <__floatsisf+0x40>
 38c:	f9 2f       	mov	r31, r25
 38e:	96 e9       	ldi	r25, 0x96	; 150
 390:	bb 27       	eor	r27, r27
 392:	93 95       	inc	r25
 394:	f6 95       	lsr	r31
 396:	87 95       	ror	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b7 95       	ror	r27
 39e:	f1 11       	cpse	r31, r1
 3a0:	f8 cf       	rjmp	.-16     	; 0x392 <__floatsisf+0x1c>
 3a2:	fa f4       	brpl	.+62     	; 0x3e2 <__floatsisf+0x6c>
 3a4:	bb 0f       	add	r27, r27
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__floatsisf+0x36>
 3a8:	60 ff       	sbrs	r22, 0
 3aa:	1b c0       	rjmp	.+54     	; 0x3e2 <__floatsisf+0x6c>
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <__floatsisf+0x6c>
 3b6:	88 23       	and	r24, r24
 3b8:	11 f0       	breq	.+4      	; 0x3be <__floatsisf+0x48>
 3ba:	96 e9       	ldi	r25, 0x96	; 150
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <__floatsisf+0x6a>
 3be:	77 23       	and	r23, r23
 3c0:	21 f0       	breq	.+8      	; 0x3ca <__floatsisf+0x54>
 3c2:	9e e8       	ldi	r25, 0x8E	; 142
 3c4:	87 2f       	mov	r24, r23
 3c6:	76 2f       	mov	r23, r22
 3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <__floatsisf+0x5e>
 3ca:	66 23       	and	r22, r22
 3cc:	71 f0       	breq	.+28     	; 0x3ea <__floatsisf+0x74>
 3ce:	96 e8       	ldi	r25, 0x86	; 134
 3d0:	86 2f       	mov	r24, r22
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	2a f0       	brmi	.+10     	; 0x3e2 <__floatsisf+0x6c>
 3d8:	9a 95       	dec	r25
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	da f7       	brpl	.-10     	; 0x3d8 <__floatsisf+0x62>
 3e2:	88 0f       	add	r24, r24
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	97 f9       	bld	r25, 7
 3ea:	08 95       	ret

000003ec <__fp_inf>:
 3ec:	97 f9       	bld	r25, 7
 3ee:	9f 67       	ori	r25, 0x7F	; 127
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	08 95       	ret

000003f8 <__fp_nan>:
 3f8:	9f ef       	ldi	r25, 0xFF	; 255
 3fa:	80 ec       	ldi	r24, 0xC0	; 192
 3fc:	08 95       	ret

000003fe <__fp_pscA>:
 3fe:	00 24       	eor	r0, r0
 400:	0a 94       	dec	r0
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	18 06       	cpc	r1, r24
 408:	09 06       	cpc	r0, r25
 40a:	08 95       	ret

0000040c <__fp_pscB>:
 40c:	00 24       	eor	r0, r0
 40e:	0a 94       	dec	r0
 410:	12 16       	cp	r1, r18
 412:	13 06       	cpc	r1, r19
 414:	14 06       	cpc	r1, r20
 416:	05 06       	cpc	r0, r21
 418:	08 95       	ret

0000041a <__fp_round>:
 41a:	09 2e       	mov	r0, r25
 41c:	03 94       	inc	r0
 41e:	00 0c       	add	r0, r0
 420:	11 f4       	brne	.+4      	; 0x426 <__fp_round+0xc>
 422:	88 23       	and	r24, r24
 424:	52 f0       	brmi	.+20     	; 0x43a <__fp_round+0x20>
 426:	bb 0f       	add	r27, r27
 428:	40 f4       	brcc	.+16     	; 0x43a <__fp_round+0x20>
 42a:	bf 2b       	or	r27, r31
 42c:	11 f4       	brne	.+4      	; 0x432 <__fp_round+0x18>
 42e:	60 ff       	sbrs	r22, 0
 430:	04 c0       	rjmp	.+8      	; 0x43a <__fp_round+0x20>
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__fp_split3>:
 43c:	57 fd       	sbrc	r21, 7
 43e:	90 58       	subi	r25, 0x80	; 128
 440:	44 0f       	add	r20, r20
 442:	55 1f       	adc	r21, r21
 444:	59 f0       	breq	.+22     	; 0x45c <__fp_splitA+0x10>
 446:	5f 3f       	cpi	r21, 0xFF	; 255
 448:	71 f0       	breq	.+28     	; 0x466 <__fp_splitA+0x1a>
 44a:	47 95       	ror	r20

0000044c <__fp_splitA>:
 44c:	88 0f       	add	r24, r24
 44e:	97 fb       	bst	r25, 7
 450:	99 1f       	adc	r25, r25
 452:	61 f0       	breq	.+24     	; 0x46c <__fp_splitA+0x20>
 454:	9f 3f       	cpi	r25, 0xFF	; 255
 456:	79 f0       	breq	.+30     	; 0x476 <__fp_splitA+0x2a>
 458:	87 95       	ror	r24
 45a:	08 95       	ret
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	14 06       	cpc	r1, r20
 462:	55 1f       	adc	r21, r21
 464:	f2 cf       	rjmp	.-28     	; 0x44a <__fp_split3+0xe>
 466:	46 95       	lsr	r20
 468:	f1 df       	rcall	.-30     	; 0x44c <__fp_splitA>
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__fp_splitA+0x30>
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	18 06       	cpc	r1, r24
 472:	99 1f       	adc	r25, r25
 474:	f1 cf       	rjmp	.-30     	; 0x458 <__fp_splitA+0xc>
 476:	86 95       	lsr	r24
 478:	71 05       	cpc	r23, r1
 47a:	61 05       	cpc	r22, r1
 47c:	08 94       	sec
 47e:	08 95       	ret

00000480 <__fp_zero>:
 480:	e8 94       	clt

00000482 <__fp_szero>:
 482:	bb 27       	eor	r27, r27
 484:	66 27       	eor	r22, r22
 486:	77 27       	eor	r23, r23
 488:	cb 01       	movw	r24, r22
 48a:	97 f9       	bld	r25, 7
 48c:	08 95       	ret

0000048e <__mulsf3>:
 48e:	0a d0       	rcall	.+20     	; 0x4a4 <__mulsf3x>
 490:	c4 cf       	rjmp	.-120    	; 0x41a <__fp_round>
 492:	b5 df       	rcall	.-150    	; 0x3fe <__fp_pscA>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <__mulsf3+0x12>
 496:	ba df       	rcall	.-140    	; 0x40c <__fp_pscB>
 498:	18 f0       	brcs	.+6      	; 0x4a0 <__mulsf3+0x12>
 49a:	95 23       	and	r25, r21
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__mulsf3+0x12>
 49e:	a6 cf       	rjmp	.-180    	; 0x3ec <__fp_inf>
 4a0:	ab cf       	rjmp	.-170    	; 0x3f8 <__fp_nan>
 4a2:	ef cf       	rjmp	.-34     	; 0x482 <__fp_szero>

000004a4 <__mulsf3x>:
 4a4:	cb df       	rcall	.-106    	; 0x43c <__fp_split3>
 4a6:	a8 f3       	brcs	.-22     	; 0x492 <__mulsf3+0x4>

000004a8 <__mulsf3_pse>:
 4a8:	99 23       	and	r25, r25
 4aa:	d9 f3       	breq	.-10     	; 0x4a2 <__mulsf3+0x14>
 4ac:	55 23       	and	r21, r21
 4ae:	c9 f3       	breq	.-14     	; 0x4a2 <__mulsf3+0x14>
 4b0:	95 0f       	add	r25, r21
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	55 1f       	adc	r21, r21
 4b6:	aa 27       	eor	r26, r26
 4b8:	ee 27       	eor	r30, r30
 4ba:	ff 27       	eor	r31, r31
 4bc:	bb 27       	eor	r27, r27
 4be:	00 24       	eor	r0, r0
 4c0:	08 94       	sec
 4c2:	67 95       	ror	r22
 4c4:	20 f4       	brcc	.+8      	; 0x4ce <__mulsf3_pse+0x26>
 4c6:	e2 0f       	add	r30, r18
 4c8:	f3 1f       	adc	r31, r19
 4ca:	b4 1f       	adc	r27, r20
 4cc:	0a 1e       	adc	r0, r26
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	44 1f       	adc	r20, r20
 4d4:	aa 1f       	adc	r26, r26
 4d6:	66 95       	lsr	r22
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__mulsf3_pse+0x1c>
 4da:	77 95       	ror	r23
 4dc:	30 f4       	brcc	.+12     	; 0x4ea <__mulsf3_pse+0x42>
 4de:	f3 0f       	add	r31, r19
 4e0:	b4 1f       	adc	r27, r20
 4e2:	0a 1e       	adc	r0, r26
 4e4:	12 1e       	adc	r1, r18
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <__mulsf3_pse+0x42>
 4e8:	63 95       	inc	r22
 4ea:	33 0f       	add	r19, r19
 4ec:	44 1f       	adc	r20, r20
 4ee:	aa 1f       	adc	r26, r26
 4f0:	22 1f       	adc	r18, r18
 4f2:	76 95       	lsr	r23
 4f4:	99 f7       	brne	.-26     	; 0x4dc <__mulsf3_pse+0x34>
 4f6:	87 95       	ror	r24
 4f8:	20 f4       	brcc	.+8      	; 0x502 <__mulsf3_pse+0x5a>
 4fa:	b4 0f       	add	r27, r20
 4fc:	0a 1e       	adc	r0, r26
 4fe:	12 1e       	adc	r1, r18
 500:	63 1f       	adc	r22, r19
 502:	44 0f       	add	r20, r20
 504:	aa 1f       	adc	r26, r26
 506:	22 1f       	adc	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	86 95       	lsr	r24
 50c:	a9 f7       	brne	.-22     	; 0x4f8 <__mulsf3_pse+0x50>
 50e:	86 2f       	mov	r24, r22
 510:	71 2d       	mov	r23, r1
 512:	60 2d       	mov	r22, r0
 514:	11 24       	eor	r1, r1
 516:	9f 57       	subi	r25, 0x7F	; 127
 518:	50 40       	sbci	r21, 0x00	; 0
 51a:	8a f0       	brmi	.+34     	; 0x53e <__mulsf3_pse+0x96>
 51c:	e1 f0       	breq	.+56     	; 0x556 <__mulsf3_pse+0xae>
 51e:	88 23       	and	r24, r24
 520:	4a f0       	brmi	.+18     	; 0x534 <__mulsf3_pse+0x8c>
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	bb 1f       	adc	r27, r27
 528:	66 1f       	adc	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	50 40       	sbci	r21, 0x00	; 0
 532:	a9 f7       	brne	.-22     	; 0x51e <__mulsf3_pse+0x76>
 534:	9e 3f       	cpi	r25, 0xFE	; 254
 536:	51 05       	cpc	r21, r1
 538:	70 f0       	brcs	.+28     	; 0x556 <__mulsf3_pse+0xae>
 53a:	58 cf       	rjmp	.-336    	; 0x3ec <__fp_inf>
 53c:	a2 cf       	rjmp	.-188    	; 0x482 <__fp_szero>
 53e:	5f 3f       	cpi	r21, 0xFF	; 255
 540:	ec f3       	brlt	.-6      	; 0x53c <__mulsf3_pse+0x94>
 542:	98 3e       	cpi	r25, 0xE8	; 232
 544:	dc f3       	brlt	.-10     	; 0x53c <__mulsf3_pse+0x94>
 546:	86 95       	lsr	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f7 95       	ror	r31
 550:	e7 95       	ror	r30
 552:	9f 5f       	subi	r25, 0xFF	; 255
 554:	c1 f7       	brne	.-16     	; 0x546 <__mulsf3_pse+0x9e>
 556:	fe 2b       	or	r31, r30
 558:	88 0f       	add	r24, r24
 55a:	91 1d       	adc	r25, r1
 55c:	96 95       	lsr	r25
 55e:	87 95       	ror	r24
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
